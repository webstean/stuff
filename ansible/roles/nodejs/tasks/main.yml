- name: CHOWN /usr/local
  command: |
    chown -R "{{nodejs_install_npm_user}}":"{{nodejs_install_npm_user}}" "{{item}}"
  with_items:
    - "/usr/local"
    - "/data"
  become: yes

- name: INSTALLING DISTRO NodeJS
  apt: pkg={{ item }} state=present
  become: yes
  become_method: sudo
  with_items:
    - nodejs
    - npm

- name: CREATING SYMLINK
  become: yes
  become_method: sudo
  file:
    src: /usr/bin/nodejs
    dest: /usr/bin/node
    state: link

- name: CREATNG NPM GLOBAL DIRECTORY
  file:
    path: "{{ npm_config_prefix }}"
    owner: "{{ nodejs_install_npm_user }}"
    group: "{{ nodejs_install_npm_user }}"
    state: directory
  become: yes

- name: ADDING npm_config_prefix BIN DIRECTORY TO GLOBAL $PATH VARIABLE
  template:
    src: npm.sh.j2
    dest: /etc/profile.d/npm.sh
    mode: 0644
  become: yes

- name: ENSURE NPM GLOBAL PACKAGES ARE INSTALLED
  npm:
    name: "{{ item.name | default(item) }}"
    version: "{{ item.version | default('latest') }}"
    global: yes
    state: latest
  environment:
    NPM_CONFIG_PREFIX: "{{ npm_config_prefix }}"
    NODE_PATH: "{{ npm_config_prefix }}/lib/node_modules"
#    NPM_CONFIG_UNSAFE_PERM: "{{ npm_config_unsafe_perm }}"
  with_items: "{{ nodejs_npm_global_packages }}"

- name: CHANGING NODEJS VERSION BY GIVEN nodejs_version WITH N
  shell:
    cmd: "{{npm_config_prefix}}/bin/n {{nodejs_version}}"
    chdir: "{{app_folder}}"

- name: REMOVING EXISTING node_modules FOLDER IN PROJECT
  shell:
    cmd: rm -rf node_modules
    chdir: "{{app_folder}}"

- name: INSTALLING THE STATION (npm install)
  shell:
    cmd: npm install --no-bin-links
    chdir: "{{app_folder}}"

- name: REBUILDING THE STATION (npm rebuild)
  shell:
    cmd: npm rebuild --no-bin-links
    chdir: "{{app_folder}}"

