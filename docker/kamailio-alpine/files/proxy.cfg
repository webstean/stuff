#!define IPADDRESS "192.168.1.101"

#!define SWITCH_IPADDRESS "10.0.0.4"

#!define FLAG_FROM_PABX 1
#!define FLAG_FROM_MSTEAMS 2

# Variables 
#!substdef "!SIPS_PORT!5061!g"
#!substdef "!CERTPATH!/etc/letsencrypt/live!g"
#!substdef "!PRIVATE_IP!10.0.0.6!g"
#!substdef "!EXTERNAL_NAME!sbc.lordsomerscamp.org.au!g"
#!substdef "!EXTERNAL_IP!52.189.194.44!g"
#!substdef "!PABX!10.0.0.4!g"

# ------------------ module loading ----------------------------------
loadmodule "tm.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "sl.so"
loadmodule "maxfwd.so"
loadmodule "nathelper.so"
loadmodule "textops.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "path.so"

# ----------------- setting module-specific parameters ---------------
modparam("nathelper|registrar", "received_avp", "$avp(s:rcv)")
# -------------------------  request routing logic -------------------

loadmodule "tls.so"
modparam("tls", "config", "/etc/kamailio/tls.cfg")

loadmodule "dispatcher.so"
modparam("dispatcher", "list_file", "/etc/kamailio/msteams.list")
modparam("dispatcher", "ds_probing_mode", 1)
modparam("dispatcher", "ds_ping_interval", 60)

### Set up listeners
### format listen variable: listen=[proto]:[localip]:[lport] advertise [publicip]:[pport]
disable_sctp=yes
listen=tls:PRIVATE_IP:SIPS_PORT advertise EXTERNAL_IP:SIPS_PORT
tcp_accept_no_cl = true
tcp_rd_buf_size = 16384

# main routing logic
route {
        # per request initial checks
        route(SANITY_CHECK);

        # CANCEL processing
        if (is_method("CANCEL")) {
            if (t_check_trans()) {
            t_relay();
        }
        exit;
    }

    route(CHECK_SOURCE_IP);

    ##################################
    ### HANDLE SEQUENTIAL REQUESTS ###
    route(WITHINDLG);

    ###############################
    ### HANDLE INITIAL REQUESTS ###
    t_check_trans();

    if (is_method("INVITE|REFER")) {
        ##### record_route();
        record_route_preset("EXTERNAL_NAME:5061;transport=tls", "EXTERNAL_IP:5060");
    }
       
    if (is_method("REGISTER")) {
        add_path();
    }

    if (isflagset(FLAG_FROM_PABX)) {
        # don't send INVITE from SWITCH back to SWITCH, set reply route to handle NAT and forward them along
        t_on_reply("EXTERNAL_REPLY");
    } else {
        # set destination to your SWITCH
        $du = "sip:PABX:SIPS_PORT";
    }
    route(RELAY);
}


route[SANITY_CHECK]
{
    if (!sanity_check()) {
        #xlog("L_WARN", "$ci|end|message is insane");
        exit;
    }

    if (!mf_process_maxfwd_header("10")) {
            #xlog("L_WARN", "$ci|end|too much hops, not enough barley");
            send_reply("483", "Too Many Hops");
            exit;
    }

    if ($ua == "friendly-scanner" ||
        $ua == "sundayddr" ||
        $ua =~ "sipcli" ) {
        #xlog("L_WARN", "$ci|end|dropping message with user-agent $ua");
        exit;
    }

    if ($si == IPADDRESS) {
        #xlog("L_WARN", "$ci|end|dropping message");
        exit;
    }
}

route[CHECK_SOURCE_IP]
{
    if ($si == SWITCH_IPADDRESS) {
        setflag(FLAG_FROM_PABX);
    } else {
        setflag(FLAG_FROM_MSTEAMS);
    }
}

# Handle requests within SIP dialogs
route[WITHINDLG]
{
    if (has_totag()) {
        # sequential request withing a dialog should
        # take the path determined by record-routing
        if (loose_route()) {
            route(RELAY);
        } else {
            if (is_method("NOTIFY")) {
                route(RELAY);
            }
            if (is_method("SUBSCRIBE") && uri == myself) {
                # in-dialog subscribe requests
                exit;
            }
            if (is_method("ACK")) {
                if (t_check_trans()) {
                    # no loose-route, but stateful ACK;
                    # must be an ACK after a 487
                    # or e.g. 404 from upstream server
                    t_relay();
                    exit;
                } else {
                    # ACK without matching transaction ... ignore and discard
                    xlog("ACK without matching transaction ... ignore and discard");
                    exit;
                }
            }
            sl_send_reply("404","Not here");
        }
        exit;
    }
}

onreply_route[EXTERNAL_REPLY]
{
        route(NAT_TEST_AND_CORRECT);
}

route[NAT_TEST_AND_CORRECT]
{
        if (nat_uac_test("3")) {
                if (is_method("REGISTER")) {
                        fix_nated_register();
                } else {
                        fix_nated_contact();
                }
                force_rport();
        }
        if (has_body("application/sdp") && nat_uac_test("8")) {
                fix_nated_sdp("10");
        }
}

route[RELAY]
{
        if (!t_relay()) {
                sl_reply_error();
        }
        exit;
}

event_route[tm:local-request] {
    if(is_method("OPTIONS") && $ru =~ "pstnhub.microsoft.com") {
		## Keepalive need Contact header for Microsoft Teams
		append_hf("Contact: <sip:EXTERNAL_NAME:SIPS_PORT;transport=tls>\r\n");
	}
}
