#!define IPADDRESS "192.168.1.101"

#!define SWITCH_IPADDRESS "192.168.1.102"

#!define FLAG_FROM_PABX 1
#!define FLAG_FROM_USER 2

# ------------------ module loading ----------------------------------
loadmodule "tm.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "sl.so"
loadmodule "maxfwd.so"
loadmodule "nathelper.so"
loadmodule "textops.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "path.so"

# ----------------- setting module-specific parameters ---------------
modparam("nathelper|registrar", "received_avp", "$avp(s:rcv)")
# -------------------------  request routing logic -------------------
# main routing logic

route {
        # per request initial checks
        route(SANITY_CHECK);

        # CANCEL processing
        if (is_method("CANCEL")) {
            if (t_check_trans()) {
            t_relay();
        }
        exit;
    }

    route(CHECK_SOURCE_IP);

    ##################################
    ### HANDLE SEQUENTIAL REQUESTS ###
    route(WITHINDLG);

    ###############################
    ### HANDLE INITIAL REQUESTS ###
    t_check_trans();

    if (is_method("INVITE|REFER")) {
        record_route();
    }
       
    if (is_method("REGISTER")) {
        add_path();
    }

    if (isflagset(FLAG_FROM_PABX)) {
        # don't send INVITE from SWITCH back to SWITCH, set reply route to handle NAT and forward them along
        t_on_reply("EXTERNAL_REPLY");
    } else {
        # set destination to your SWITCH
        $du = "sip:192.168.1.102:5060";
    }
    route(RELAY);
}


route[SANITY_CHECK]
{
    if (!sanity_check()) {
        #xlog("L_WARN", "$ci|end|message is insane");
        exit;
    }

    if (!mf_process_maxfwd_header("10")) {
            #xlog("L_WARN", "$ci|end|too much hops, not enough barley");
            send_reply("483", "Too Many Hops");
            exit;
    }

    if ($ua == "friendly-scanner" ||
        $ua == "sundayddr" ||
        $ua =~ "sipcli" ) {
        #xlog("L_WARN", "$ci|end|dropping message with user-agent $ua");
        exit;
    }

    if ($si == IPADDRESS) {
        #xlog("L_WARN", "$ci|end|dropping message");
        exit;
    }
}

route[CHECK_SOURCE_IP]
{
    if ($si == SWITCH_IPADDRESS) {
        setflag(FLAG_FROM_PABX);
    } else {
        setflag(FLAG_FROM_USER);
    }
}

# Handle requests within SIP dialogs
route[WITHINDLG]
{
    if (has_totag()) {
        # sequential request withing a dialog should
        # take the path determined by record-routing
        if (loose_route()) {
            route(RELAY);
        } else {
            if (is_method("NOTIFY")) {
            route(RELAY);
        }
        if (is_method("SUBSCRIBE") && uri == myself) {
            # in-dialog subscribe requests
            exit;
        }
        if (is_method("ACK")) {
            if (t_check_trans()) {
                # no loose-route, but stateful ACK;
                # must be an ACK after a 487
                # or e.g. 404 from upstream server
                t_relay();
                exit;
            } else {
                # ACK without matching transaction ... ignore and discard
                xlog("ACK without matching transaction ... ignore and discard");
                exit;
            }
        }
        sl_send_reply("404","Not here");
    }
    exit;
        }
}

onreply_route[EXTERNAL_REPLY]
{
        route(NAT_TEST_AND_CORRECT);
}


route[NAT_TEST_AND_CORRECT]
{
        if (nat_uac_test("3")) {
                if (is_method("REGISTER")) {
                        fix_nated_register();
                } else {
                        fix_nated_contact();
                }
                force_rport();
        }
        if (has_body("application/sdp") && nat_uac_test("8")) {
                fix_nated_sdp("10");
        }
}

route[RELAY]
{
        if (!t_relay()) {
                sl_reply_error();
        }
        exit;
}