#!define IPADDRESS "10.0.0.6"

#!define SWITCH_IPADDRESS "10.0.0.4"

#!define FLAG_FROM_PABX 1
#!define FLAG_FROM_INTERNET 2

# Variables 
#!substdef "!SIP_PORT!5060!g"
#!substdef "!SIPS_PORT!5061!g"
#!substdef "!CERTPATH!/etc/letsencrypt/live!g"
#!substdef "!PRIVATE_IP!10.0.0.6!g"
#!substdef "!EXTERNAL_NAME!sbc.lordsomerscamp.org.au!g"
#!substdef "!EXTERNAL_IP!52.189.194.44!g"
#!substdef "!INTERNAL_3CX!10.0.0.4!g"

####### Global Parameters #########
/* LOG Levels: 3=DBG, 2=INFO, 1=NOTICE, 0=WARN, -1=ERR, ... */
debug=2

/* set to 'yes' to print log messages to terminal or use '-E' cli option */
log_stderror=no
/* log_stderror=yes */

memdbg=5
memlog=5

log_facility=LOG_LOCAL0
#### log_prefix="{$mt $hdr(CSeq) $ci} "
log_prefix=""

/* number of SIP routing processes for each UDP socket
 * - value inherited by tcp_children and sctp_children when not set explicitely */
children=4

/* number of SIP routing processes for all TCP/TLS sockets */
tcp_children=4

/* uncomment the next line to disable the auto discovery of local aliases
 * based on reverse DNS on IPs (default on) */
auto_aliases=no

/* add local domain aliases - it can be set many times */
alias="EXTERNAL_NAME"

/* life time of TCP connection when there is no traffic
 * - a bit higher than registration expires to cope with UA behind NAT */
tcp_connection_lifetime=3605

/* upper limit for TCP connections (it includes the TLS connections) */
tcp_max_connections=2048

#!ifdef WITH_SCTP
enable_sctp=yes
#!else
enable_sctp=no
#!endif

/* Enable TLS Support */
enable_tls=yes
/* upper limit for TLS connections */
tls_max_connections=2048

## Obscure
user_agent_header="User-Agent: Kamailio"
server_header="Server: Kamailio"
sip_warning=yes

# ------------------ module loading ----------------------------------
/* set paths to location of modules */
mpath="/usr/lib/x86_64-linux-gnu/kamailio/modules/"

/* tls module needs to enabled before any others */
loadmodule "tls.so"
/* ignore library check */
modparam("tls", "tls_force_run", 11)
modparam("tls", "config", "/etc/kamailio/tls.cfg")

### outbound logic
loadmodule "stun.so"
loadmodule "outbound.so"

loadmodule "tm.so"
loadmodule "rr.so"
loadmodule "pv.so"
loadmodule "sl.so"
loadmodule "maxfwd.so"
loadmodule "nathelper.so"
loadmodule "textops.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "path.so"

# ----------------- setting module-specific parameters ---------------
modparam("nathelper|registrar", "received_avp", "$avp(s:rcv)")
# -------------------------  request routing logic -------------------

### get some colour
modparam("xlog", "force_color", 0)

loadmodule "dispatcher.so"
modparam("dispatcher", "list_file", "/etc/kamailio/msteams.list")
modparam("dispatcher", "ds_probing_mode", 1)
modparam("dispatcher", "ds_ping_interval", 60)

### Set up listeners - if none set, Kamailio binds to all local IP addresses
### format listen variable: listen=[proto]:[localip]:[lport] advertise [publicip]:[pport]
listen=tls:PRIVATE_IP:SIPS_PORT advertise EXTERNAL_IP:SIPS_PORT
### - basic prototype (full prototype can be found in Wiki - Core Cookbook):
###   listen=[proto]:[localip]:[lport] advertise [publicip]:[pport]
#listen=udp:PRIVATE_IP:SIP_PORT advertise EXTERNAL_IP:SIP_PORT
listen=tcp:PRIVATE_IP:SIP_PORT advertise EXTERNAL_IP:SIP_PORT

#!ifdef WITH_SCTP
listen=sctp:PRIVATE_IP:SIP_PORT advertise EXTERNAL_IP:SIP_PORT
#!endif

# main routing logic
route {
    
    # cut down what we'll process
    switch($rm) {
        case "REGISTER":
            ;
        case "INVITE":
            ;
        case "ACK":
            ;
        case "BYE":
            ;
        case "OPTIONS":
            break;
        default:
            exit;
    }
    
    # per request initial checks
    route(SANITY_CHECK);

    #### process keep alives - but only ones sent to here
	if(is_method("OPTIONS") && uri==myself && $rU==$null) {
        ### xlog("L_INFO","Sending Keepalive to [$ua] @ $si:$sp\n");
    	sl_send_reply("200","Keepalive");
        exit;
	}


    xlog("L_INFO","Route: (post-sanity/keepalive) [$ua] via $rP:$si:$sp\n");
    
    append_hf("X-Proxied: You betcha\r\n");
    
    if (is_method("INVITE|REFER") && $ru =~ "pstnhub.microsoft.com") {
        record_route_preset("EXTERNAL_NAME:5061;transport=tls", "EXTERNAL_IP:5060");
    }
        
    #Forward to new IP
    forward(INTERNAL_3CX);
}

route[CHECK_SOURCE_IP]
{
    ### $si is the source IP
    ### $di is the destnation IP
    ### $su is the source URI
    ### $du is the destination URI
    ### $rm is request method
    if ($si == "10.0.0.4") {
    	setflag(FLAG_FROM_PABX);
        xlog("L_INFO","===> PABX {$rm} from [$su]\n");
        ## route(NAT_TEST_AND_CORRECT);
    } else {
        setflag(FLAG_FROM_INTERNET);
        xlog("L_INFO","===> INTERNET {$rm} from [$su]\n");
        ## route(NAT_TEST_AND_CORRECT);
    }
}

# Handle requests within SIP dialogs
route[WITHINDLG]
{
    if (has_totag()) {
        # sequential request withing a dialog should
        # take the path determined by record-routing
        if (loose_route()) {
            route(RELAY);
        } else {
            if (is_method("NOTIFY")) {
                route(RELAY);
            }
            if (is_method("SUBSCRIBE") && uri == myself) {
                # in-dialog subscribe requests
                exit;
            }
            if (is_method("ACK")) {
                if (t_check_trans()) {
                    # no loose-route, but stateful ACK;
                    # must be an ACK after a 487
                    # or e.g. 404 from upstream server
                    t_relay();
                    exit;
                } else {
                    # ACK without matching transaction ... ignore and discard
                    xlog("ACK without matching transaction ... ignore and discard");
                    exit;
                }
            }
            sl_send_reply("404","Not here");
        }
        exit;
    }
}

onreply_route[EXTERNAL_REPLY]
{
    route(NAT_TEST_AND_CORRECT);
}

route[NAT_TEST_AND_CORRECT]
{
    if (nat_uac_test("3")) {
        if (is_method("REGISTER")) {
            fix_nated_register();
        } else {
            fix_nated_contact();
        }
        force_rport();
    }
    if (has_body("application/sdp") && nat_uac_test("8")) {
        fix_nated_sdp("10");
    }
}

route[RELAY]
{
    if (!t_relay()) {
        sl_reply_error();
    }
    exit;
}

onreply_route{
    xlog("L_INFO","Reply: [$ua] via $rP:$si:$sp\n");
    append_hf("X-Proxied: For the reply\r\n");
}

event_route[tm:local-request] {
    if(is_method("OPTIONS") && $ru =~ "pstnhub.microsoft.com") {
		## Keepalive need Contact header for Microsoft Teams
        ### xlog("L_INFO","Adjusting Contact Header for MS Teams: EXTERNAL_NAME:SIPS_PORT\n");
		append_hf("Contact: <sip:EXTERNAL_NAME:SIPS_PORT;transport=tls>\r\n");
	}
}

### to be replaced
route[SANITY_CHECK]
{
    if (!sanity_check()) {
        #xlog("L_WARN", "$ci|end|message is insane");
        exit;
    }

    if (!mf_process_maxfwd_header("10")) {
            #xlog("L_WARN", "$ci|end|too much hops, not enough barley");
            send_reply("483", "Too Many Hops");
            exit;
    }

    if ($ua == "friendly-scanner" ||
        $ua == "sundayddr" ||
        $ua =~ "sipcli" ) {
        xlog("L_WARN", "$ci|end|dropping message with user-agent $ua");
        exit;
    }

    # why is this here
    if ($si == IPADDRESS) {
        xlog("L_WARN", "$ci|end|dropping message");
        exit;
    }
}

