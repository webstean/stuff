# the return code of a function as follow:
# <0 (negative value) - it is evaluated to false
# >0 (positive value) - it is evaluated to true
# =0 (zero) - it is evaluated as exit (stop execution of configuration file) 
# However, if return code is 0, the next action after function() is not executed. It can be used only of positive or negative response code.

####### Routing Logic ########

/* Main SIP request routing logic
 * - processing of any incoming SIP request starts with this route
 * - note: this is the same as route { ... } */
request_route {

# 03 9510 7066 / Extensions 2XX
$var(albert) = "^\+61395107066|\b(2[0-9][0-9]{1})\b";
	
# 03 5983 5502 / Extensions 5XX
$var(somers) = "^\+61359835502|\b(5[0-9][0-9]{1})\b";
	
#!ifdef WITH_EXEC
	# run script
	exec_msg("/etc/kamailio/execshow.sh >>/tmp/aw123.out");
#!endif

#!ifdef WITH_DEBUG
	# debug info
	xlog("L_INFO","=UNFILTERED=>: $rm ($fu ($si:$sp) to $tu, $ci)\n");
#!endif

#!ifdef WITH_DMQ
    # handle DMQ messages
	if ($rm == "KDMQ" && $rp == DMQ_PORT) {
        dmq_handle_message();
        exit;
    }
#!else
	if ($rm == "KDMQ" ) {
		xlog("L_INFO", "rejecting KMDQ method - as KMDQ is not configured.\n");
		sl_send_reply("403", "KDMQ not implemented");
		exit;
	}
#!endif

#!ifdef TLS_ONLY
	# at some point, we'll only accept TLS connections
	if(proto != TLS) {
		xlog("L_INFO", "rejecting non TLS (encrypted) $ru from $si\n");
		sl_send_reply("403", "Accepting TLS Only");
		exit;
	}
#!endif

	# initial tests
	route(FIRST);
	route(INFO);

	# per request initial checks
	route(REQINIT);

	# set source and destination flags
	route(FLAGS);
	route(FLAGS_INFO);

	# When changing the transport protocol, kamailio does bridging automatically.
	# For example, if two users call each other and one has registered over UDP and
	# the other over TCP, nothing special is needed, usrloc/registrar/rr and tm will
	# do the job internally.

	# emergency routing
	route(EHANDLING);
	
#!ifdef WITH_SPEEDDIAL
	# search for short dialing - * plus 4-digit extension
	if (uri==myself) {
		if(uri=~"sip:[2,5-9][0-9][0-9]@.*")
			### xlog("L_ERROR", "Doing speeddial lookup for $rU\n");
			sd_lookup("speed_dial");
	}
#!endif

	# NAT detection
	route(NATDETECT);

	# CANCEL processing
	if (is_method("CANCEL")) {
		if (t_check_trans()) {
			route(RELAY);
		}
		exit;
	}
	
	# retransmission processing
	if (!is_method("ACK")) {
		if(t_precheck_trans()) {
			t_check_trans();
			exit;
		}
		t_check_trans();
	}

	# handle requests within SIP dialogs
	route(WITHINDLG);

	### authentication
    route(AUTH);

	# handle registrations
	route(REGISTRAR);
	
	if ($rU==$null) {
		# request with no Username in RURI
		xlog("L_INFO", "Rejecting, request with no Username in RURI\n");
		sl_send_reply("484","Address Incomplete");
		exit;
	}

	# accounting only for INVITEs
	if (is_method("INVITE")) {
		setflag(FLT_ACC); # do accounting
	}
	
	# if from MS TEAMS - MS TEAMS requires a correct Record-Route header from Kamailio as this is used as an authenticiation mechanism. 
	if (isbflagset(FLB_SRC_MSTEAMS)) {
		xlog("L_ERROR", "SRC is MSTEAMS, adjusting route\n");
		# record_route_preset("$td:SIP_PORT;transport=udp;r2=on", "$td:5061;transport=tls;r2=on");
	} else {
		xlog("L_ERROR", "**DUMMY***\n");
		# No MS Teams
		# record_route();
	}

	# if to MS TEAMS - MS TEAMS requires a correct Record-Route header from Kamailio as this is used as an authenticiation mechanism. 
	if (isbflagset(FLB_DST_MSTEAMS)) {
		xlog("L_ERROR", "DST is MSTEAMS, adjusting route\n");
		# record_route_preset("MSTEAMS_DOMAIN:5061;transport=tls;r2=on", "PRIVATE_IP:SIP_PORT;transport=udp;r2=on");
	} else {
		xlog("L_ERROR", "**DUMMY***\n");
		# No MS Teams
		# record_route();
	}
	
	# all good - time to route
	route(ROUTING);

	# catch all
	xlog("L_ERROR","Can't deal with $rU with $rm from $si:$sp - sending 501 error");
	sl_send_reply("501","Fuck off $rm");
	### xlog("No idea how to respond to method $rm");
	### sl_reply("501", "Not Implemented");
	exit;
}

######################################################################
# EMERGENCY Number Handling
######################################################################
route[EHANDLING] {
	# Australian Emergency Numbers (Victoria)
	# 000 (Emergency), 112 (Emergency)
	# Others: 132 500 (SES), 131 444 (Police Assistance) 131 114 (Lifeline)

    if($tU == "000" or $tU == "+61000" or $tU == "112" or $tU == "+61112" or $tU == "999000") {
        xlog("L_CRITICAL","Emergency call ($tU) from $fU [$rm]");
		route(ENOTIFY);
		## this our emergency test number, don't route, just notify is enough
		if ($tU != "999000") {
			$ru = "sip:" + "+61000" + "@" + "EXTERNAL_NAME";
			$var(disgroup) = 99;
			route(DISPATCH);
		} else {
			sl_send_reply("403", "Test Success for Emergency Call");
		}
		exit;
    }
    return ;
}

######################################################################
# EMERGENCY Number Notify
######################################################################
route[ENOTIFY] {
    xlog("Emergency Notify Route");
    $uac_req(method)="MESSAGE";
	$uac_req(ruri)="sip:TRUNK_HOSTP:TRUNK_PORT";
    $uac_req(furi)="sip:Emergency Alert";
    $uac_req(turi)="sip:thisphone";
    $uac_req(callid)=$(mb{s.md5});
    $uac_req(hdrs)="Subject: Somers Emergency Alert\r\n";
    $uac_req(hdrs)=$uac_req(hdrs) + "Content-Type: text/plain\r\n";
    $uac_req(body)="Emergency call from " + $fU + " on IP Address " + $si + " to " + $rU + " (Emergency Number)";
    $uac_req(evroute)=1;
	
	// Permit authentication
	t_on_failure("MANAGE_FAILURE");

    // Send UAC Request
	xlog("L_INFO", "Sending $uac_req(method) request to $uac_req(ruri)");
	uac_req_send();
	
    return ;
}

route[ROUTING] {
# Some primitive routing	

    # goto Albert Park PABX
	if (isbflagset(FLB_DST_ALBERT)) {
		xlog("L_INFO","Dispatching $fu to Albert Park...");
		$var(disgroup) = 22;
		route(DISPATCH);
		exit;
	}

	# goto Somers PABX
	if (isbflagset(FLB_DST_SOMERS)) {
		xlog("L_INFO","Dispatching $fu to Somers...");
		$var(disgroup) = 33;
		route(DISPATCH);
		exit;
	}
	
	# goto Microsoft Teams
#!ifdef WITH_MSTEAMS
	if (isbflagset(FLB_DST_MSTEAMS)) {
		xlog("L_INFO","Dispatching $fu to Microsoft Teams...");
		$var(disgroup) = 44;
	    route(DISPATCH);
		exit;
	}
#!endif

#!ifdef WITH_TRUNK
	# trunk calls need to be in E.164 format (+country etc...)
	if (route(E164) ) {
		#### Public / PSTN / routing
		xlog("L_INFO","Dispatching $fu to Trunk...");
		# we only accept Australian numbers
		if (!($tU =~ "^\+61")) {
			xlog("L_ERROR", "TRUNK: $tU is not an Australian number, reject - $rm from $fu to $du (IP:$si:$sp)\n");
			sl_send_reply("403", "International calls ($$) are not allowed");
			exit;
		}

		# sorry no Australian premium services
		if (($tU =~ "^\+61190")) {
			xlog("L_ERROR", "TRUNK: $tU is a premium number, reject - $rm from $fu to $du (IP:$si:$sp)\n");
			sl_send_reply("403", "Premium calls ($$) are not allowed");
			exit;
		}
		$var(disgroup) = 99;
		route(DISPATCH);
	}
#!endif
	
	# SIP to SIP
	route(SIPOUT);
	exit;
}

# Caller NAT detection
route[NATDETECT] {
#!ifdef WITH_NAT
	if (nat_uac_test("19")) {
		# new
		force_rport();
		# xlog("L_INFO","***NAT**** detected for $rm ($fu ($si:$sp) to $tu)");
		if (is_method("REGISTER")) {
			fix_nated_register();
		} else {
			if(is_first_hop()) {
				set_contact_alias();
			}
		}
		setflag(FLT_NATS);
	}
#!endif
	return;
}

# Handle SIP registrations
route[REGISTRAR] {
	if (!is_method("REGISTER")) return;

	if(isflagset(FLT_NATS)) {
		setbflag(FLB_NATB);
#!ifdef WITH_NATSIPPING
		# do SIP NAT pinging
		setbflag(FLB_NATSIPPING);
#!endif
	} if (!save("location")) {
		sl_reply_error();
	}
	exit;
}

# IP authorization and user authentication
route[AUTH] {
#!ifdef WITH_AUTH
#!ifdef WITH_IPAUTH
	if((!is_method("REGISTER")) && allow_source_address()) {
		# source IP allowed
		return;
	}
#!endif

	if (is_method("REGISTER") || from_uri==myself) {
		# authenticate requests
		if (!auth_check("$fd", "subscriber", "1")) {
			auth_challenge("$fd", "0");
			exit;
		}
		# user authenticated - remove auth header
		if(!is_method("REGISTER|PUBLISH"))
			consume_credentials();
	}
	# if caller is not local subscriber, then check if it calls
	# a local destination, otherwise deny, not an open relay here
	if (from_uri!=myself && uri!=myself) {
		sl_send_reply("403","Not relaying");
		exit;
	}

#!else
	# authentication not enabled - do not relay at all to foreign networks
	if(from_uri!=myself && uri!=myself) {
		xlog("L_ERROR","Authentication not enabled - so not relaying");
		sl_send_reply("403","Not relaying");
		# sl_send_reply("503", "Service not available");
		exit;
	}
#!endif
	return;
}

# SIPout
route[SIPOUT] {
    if (uri==myself) return ;
    append_hf("P-hint: outbound\r\n");
    route(RELAY);
    exit;
}

# Handle on hold 
route[MANAGE_ONHOLD] {

	if (!is_method("INVITE")) 
		return;

	# -msteams?
    # handle sdp media direction for SBC's/proxies that require on reply
    # rtpengine by default will use a=sendrecv if valid sdp
    if (has_body("application/sdp")) {
		$avp(sdp_media_direction) = $null;

        if (search_body("^a=inactive.*")) {
           	$avp(sdp_media_direction) = "inactive";
        } else if (search_body("^a=recvonly.*")) {
            $avp(sdp_media_direction) = "recvonly";
        }
        else if (search_body("^a=sendonly.*")) {
           	$avp(sdp_media_direction) = "sendonly";
        }
	}
}

# RTPProxy control and signaling updates for NAT traversal
route[NATMANAGE] {
#!ifdef WITH_NAT
	if (is_request()) {
		if(has_totag()) {
			if(check_route_param("nat=yes")) {
				setbflag(FLB_NATB);
			}
		}
	}
	if (!(isflagset(FLT_NATS) || isbflagset(FLB_NATB))) return;

	if (is_request()) {
		if (!has_totag()) {
			if(t_is_branch_route()) {
				add_rr_param(";nat=yes");
			}
		}
	}
	if (is_reply()) {
		if(isbflagset(FLB_NATB)) {
			if(is_first_hop())
				set_contact_alias();
		}
	}

	if(isbflagset(FLB_NATB)) {
		# no connect message in a dialog involving NAT traversal
		if (is_request()) {
			if(has_totag()) {
				set_forward_no_connect();
			}
		}
	}
#!endif
	
	# Call Recording - if required
	if (is_method("INVITE") and (status=="200")) {
	   if (isflagset(RECORD_CALL)) {
			start_recording();
	   }
	}

	if (is_method("BYE")) {
        append_hf("X-RTP-Statistics: $rtpstat\r\n");
		xlog("L_INFO","RTP Statistics: $rtpstat");
#!ifdef WITH_NAT
		if (isflagset(RECORD_CALL)) {
			stop_recording();
		}
		rtpengine_delete();
		return;
#!endif
	}
	
	route(RTPOFFER);
	return;

}

# URI update for dialog requests
route[DLGURI] {
#!ifdef WITH_NAT
	if(!isdsturiset()) {
		handle_ruri_alias();
	}
#!endif
	return;
}

# Handle requests within SIP dialogs
route[WITHINDLG] {
	if (!has_totag()) return;

	# sequential request withing a dialog should
	# take the path determined by record-routing
	if (loose_route()) {
		# test
		###if(is_method("INVITE|UPDATE") && sdp_content() && nat_uac_test("18"))
        ###     rtpengine_manage("replace-origin replace-session-connection ICE=remove direction=internal direction=external");
		route(DLGURI);
		if (is_method("BYE")) {
			setflag(FLT_ACC); # do accounting ...
			setflag(FLT_ACCFAILED); # ... even if the transaction fails
		} else if ( is_method("ACK") ) {
			# ACK is forwarded statelessly
			route(NATMANAGE);
		} else if ( is_method("NOTIFY") ) {
			# Add Record-Route for in-dialog NOTIFY as per RFC 6665.
			record_route();
		}
		route(RELAY);
		exit;
	}

	if (is_method("SUBSCRIBE") && uri == myself) {
		# in-dialog subscribe requests
		### route(PRESENCE);
		exit;
	}
	if ( is_method("ACK") ) {
		if ( t_check_trans() ) {
			# no loose-route, but stateful ACK;
			# must be an ACK after a 487
			# or e.g. 404 from upstream server
			route(RELAY);
			exit;
		} else {
			# ACK without matching transaction ... ignore and discard
			exit;
		}
	}
	sl_send_reply("404","Not here");
	exit;
}

route[E164] {
	# 1 (true) for E164 numbers
	# -1 (false) for everything else

	# checking using regex
	#if (($rU =~ "^\+[0-9]+$")) {
	#	return 1;
	#}

	# checking using siputils
	if (is_tel_number("$rU")) { 
		return 0;
	}	
	return 1;
}

######################################################################
# Send a SIP messages (like an SMS) -  via uac module
######################################################################
route["SEND_MESSAGE"] {
    xlog("Emergency Notify Route");
    $uac_req(method)="MESSAGE";
    $uac_req(ruri)="sip:TRUNK_HOSTP:TRUNK_PORT";
    $uac_req(furi)="sip:Emergency Alert";
    $uac_req(turi)="sip:thisphone";
    $uac_req(callid)=$(mb{s.md5});
    $uac_req(hdrs)="Subject: Somers Message Alert\r\n";
    $uac_req(hdrs)=$uac_req(hdrs) + "Content-Type: text/plain\r\n";
    // $uac_req(body)="Emergency call from " + $fU + " on IP Address " + $si + " to " + $rU + " (Emergency Number)";
	$uac_req(body)="A Message";
    $uac_req(evroute)=1;

	// Permit authentication
	t_on_failure("MANAGE_FAILURE");

    // Send UAC Request
    xlog("L_INFO", "Sending $uac_req(method) request to $uac_req(ruri)");
	uac_req_send();

	return ;
}

event_route[uac:reply] {
    xlog("received UAC reply code is: $uac_req(evcode)\n");
}

route[DISPATCH] {
#!ifdef WITH_DISPATCHER
	# destination sorted by priority attribute value (serial forking ordered by priority).
	# ds_select_domain vs ds_select_dst 
	# ds_select_dst (updates $du) vs ds_select_domain (updates $ru)
	# $du - reference to destination uri, $ru - reference to request's URI (address in the first line of a SIP request)
    if(!ds_select_dst($var(disgroup), "8")) {
        send_reply("404", "No destination");
        exit;
    }
    xlog("L_INFO","DISPATCH ===> Sending call $rU [$rm] ($fu ($si:$sp)");
			
    route(RELAY);
    exit;
#!endif
}

#!ifdef WITH_DISPATCHER
event_route[dispatcher:dst-up] {
    xlog("L_INFO", "Dispatcher destination <$ru> is UP\n");
}
event_route[dispatcher:dst-down] {
    xlog("L_ERROR", "Dispatcher destination <$ru> is DOWN\n");
}
#!endif

# Wrapper for relaying requests
route[RELAY] {
#!ifdef WITH_NAT
	handle_ruri_alias();
	switch ($rc) {
        case -1:
            # xlog("L_ERR", "NAT (ruri_alias)-case-1: Failed to handle alias of R-URI $ru\n");
            send_reply("400", "Bad request");
            exit;
        case 1:
            # xlog("L_INFO", "NAT (ruri_alias)-case 1: Routing in-dialog $rm from $fu to $du\n");
            break;
        case 2:
            # xlog("L_INFO", "NAT (ruri_alias)-case 2: Routing in-dialog $rm from $fu to $ru\n");
            break;
    };
#!endif
	# enable additional event routes for forwarded requests
	# - serial forking, RTP relaying handling, a.s.o.
	if (is_method("INVITE|BYE|SUBSCRIBE|UPDATE")) {
		if(!t_is_set("branch_route")) t_on_branch("MANAGE_BRANCH");
	}
	if (is_method("INVITE|SUBSCRIBE|UPDATE")) {
		if(!t_is_set("onreply_route")) t_on_reply("MANAGE_REPLY");
	}
	if (is_method("INVITE")) {
		if(!t_is_set("failure_route")) t_on_failure("MANAGE_FAILURE");
	}
	xlog("L_INFO", "Attempting relaying from $ru to $du\n");
	if (!t_relay()) {
		sl_reply_error();
	}
	exit;
}

# Manage outgoing branches
branch_route[MANAGE_BRANCH] {
	xdbg("new branch [$T_branch_idx] to $ru\n");
#!ifdef WITH_NAT
	route(NATMANAGE);
#!endif
}

# Manage route failures with MS Teams and others
failure_route[MANAGE_FAILURE] {

    if (t_is_canceled()) exit;

    # info
    xlog("I_INFO","****DESTINATION FAILURE***** with $T(reply_reason)[$T(reply_code)]");

#!ifdef WITH_TRUNK
    # need to authenticate trunk TODO: check destination IP addresss
    if(t_check_status("401|407")) {
        xlog("L_INFO", "Trying to Authenticate to Trunk $ru with TRUNK_USER...");
        $avp(auser) = "TRUNK_USER";
        $avp(apass) = "TRUNK_PASSWORD";
        uac_auth();
        t_relay();
        exit;
    }
#!endif

#!ifdef WITH_BLOCK3XX
    # block call redirect based on 3xx replies.
    if (t_check_status("3[0-9][0-9]")) {
        t_reply("404","Not found");
        exit;
    }
#!endif

#!ifdef WITH_BLOCK401407
    # block call redirect based on 401, 407 replies.
    if (t_check_status("401|407")) {
        t_reply("404","Not found");
        exit;
    }
#!endif
	exit;
}

route[BLOCKIP] {
#!ifdef WITH_APIBAN
	if (src_ip!=myself) {
		xlog("L_INFO","[R-BLOCKIP:$ci]: blocking $rm from $fu (IP:$si:$sp)\n");
		$sht(ipban=>$si) = 1;
	}
#!endif
	return;
}

# AAAAA
reply_route {
	route(RTPANSWER);	
}

# Manage incoming replies in transaction context
onreply_route[MANAGE_REPLY] {
	xlog("L_DEBUG","[ONREPLY_ROUTE] Incoming\n");
#!ifdef WITH_NAT
	if(status=~"[25][0-9][0-9]") {
		route(NATMANAGE);
	}
#!endif
}

#!ifdef WITH_MSTEAMS
# stateful logic - this can be permanent - does no harm as it only affect OPTIONS method
event_route[tm:local-request] {
    if(is_method("OPTIONS") && $ru =~ "pstnhub.microsoft.com") {
		## Keepalive need Contact header for Microsoft Teams
		# append_hf("Contact: <sip:EXTERNAL_NAME:5061;transport=tls>\r\n");
		append_hf("Contact: <sip:$fd:SIPS_PORT;transport=tls>\r\n");
	}
}
#!endif
