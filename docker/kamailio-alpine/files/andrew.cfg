
# ------------------ andrew stuff ------------------------------------

# Maximum call duration: 3 hours
#!define MAX_DIALOG_TIMEOUT 10800

# set this to above zero to drain calls - it is check inside route(FIRST)
# reset to zero, to resume normal operations
system.shutdownmode=0 desc "System shutdown mode"

/* Andrew's Define Code Blocks */

# these need to be enabled or disabled together

####### Define Code Blocks #########
#!define WITH_ANTIFLOOD
#	define WITH_APIBAN
#	define WITH_SIPDEBUG

# Somers SBC - custom IP addresses
#!define WITH_SBC

# NAT Support - required for SBC
# also enables RTPENGINE and processing
#!define WITH_NAT

# Trunk Support - required for SBC
#!define WITH_TRUNK

# Dispatcher - required for SBC
#!define WITH_DISPATCHER

# TLS Certificate support - required for SBC
#!define WITH_TLS

# MS TEAMS connectivity - required for SBC
#!define WITH_MICROSOFT_TEAMS

# 3CX Routing to Camp and Albert Park
#!define WITH_PABX

# Enable SCTP - not much support out there for this
#######!define WITH_SCTP

#######!define WITH_MULTIDOMAIN

# optional
#######!define WITH_ANTIFLOOD
#######!define WITH_EXEC

######### always needed
########!define WITH_SQLITE
# or
#!define WITH_MYSQL
#!define WITH_AUTH

#!define WITH_USRLOCDB
#!define WITH_SPEEDDIAL
#!define WITH_GEOIP

# troubleshooting
#####!define WITH_DEBUG
#####!define WITH_EXEC

# option for NAT SIP OPTIONS keepalives: WITH_NATSIPPING
#     - install RTPProxy: http://www.rtpproxy.org
#     - start RTPProxy:
#        rtpproxy -l _your_public_ip_ -s udp:localhost:7722
# OR
# To use RTPEngine (instead of RTPProxy) for nat traversal execute:
#     - define WITH_RTPENGINE
#     - install RTPEngine: https://github.com/sipwise/rtpengine
#     - start RTPEngine:
#        rtpengine --listen-ng=127.0.0.1:2223 ...

### === NUMBER FORMATS ===
### 10 digit (US format) - cannot start with a zero or 1
### regexp: \b([2-9][0-9]{9})\b

###  10 digit (Australian format) - always starts with a zero
### regexp: \b([0][2-478][0-9]{8})\b   - AUS normal phone numbers
### regexp: \b([1][3][0][0][0-9]{6})\b - AUS 1300 plus six digits
### regexp: \b([1][8][0][0][0-9]{6})\b - AUS 1800 plus six digits
### regexp: \b([1][3][1][0-9]{3})\b    - AUS 131 plus three digits

### regexp: \b([7][0-9]{2})\b   - Albert Park Extensions (7XX)
### regexp: \b([5][0-9]{2})\b   - Lord Somers Camp Extensions (5XX)

# ensure UAC for Trunk authentication
#!ifdef WITH_TRUNK
# enable specific Trunk here
#!define WITH_TRUNK_SIP_US
#!endif

#!ifdef WITH_SBC
#!substdef "!PRIVATE_IP!192.168.11.4!g"
#!substdef "!CERTPATH!/etc/letsencrypt/live!g"
#!substdef "!EXTERNAL_NAME!sbc.lordsomerscamp.org.au!g"
#!substdef "!EXTERNAL_IP!20.190.118.9!g"
#!substdef "!SIP_PORT!5060!g"
#!substdef "!SIPS_PORT!5061!g"
#!ifdef WITH_WEBSOCKETS
#!substdef "!WS_PORT!8080!g"
#!substdef "!WSS_PORT!8443!g"
#!endif
#!endif

# TRUNK: sip.us
#!ifdef WITH_TRUNK_SIP_US
#!substdef "!TRUNK_HOSTP!gw1.sip.us!g"
#!substdef "!TRUNK_HOSTS!gw2.sip.us!g"
#!substdef "!TRUNK_PROTO!udp!g"
#!substdef "!TRUNK_PORT!5060!g"
#!substdef "!TRUNK_USER!5296575339!g"
#!substdef "!TRUNK_PASSWORD!2qufev6npyf2cc2f!g"
#### SIP.US Test Number 404 997 2999 (10digits) +14049972999
#!endif 

# TRUNK: sip.us
#!ifdef WITH_TRUNK_VOIPCLOUD
#!substdef "!TRUNK_HOSTP!sipm1.au.voipcloud.online!g"
#!substdef "!TRUNK_HOSTS!sipm2.au.voipcloud.online!g"
#!substdef "!TRUNK_PROTO!udp!g"
#!substdef "!TRUNK_PORT!5060!g"
#!substdef "!TRUNK_USER!5296575339!g"
#!substdef "!TRUNK_PASSWORD!2qufev6npyf2cc2f!g"
#### SIP.US Test Number 404 997 2999 (10digits)
#!endif 

#!ifdef WITH_APIBAN
### https://apiban.org --- Community Sharing of Bad Actors
#!substdef "!APIBANKEY!2db31597134c5a5526534994cfbb522b!g"
#!endif

#!ifdef WITH_MYSQL
loadmodule "db_mysql"
#!trydef DBURL "mysql://kamailio:kamailiorw@localhost/kamailio"
#!endif

#!ifdef WITH_SQLITE
loadmodule "db_sqlite"
#!trydef DBURL "sqlite:////etc/kamailio/db/sqlite"
#!endif 

#!ifdef WITH_MULTIDOMAIN
# - the value for 'use_domain' parameters
#!define MULTIDOMAIN 1
#!else
#!define MULTIDOMAIN 0
#!endif

#!ifdef WITH_SYSTEMDOPS
# needs libsystemd
loadmodule "systemdops"
#!endif 

# ---- sort out dependencies ----
#!ifdef WITH_MICROSOFT_TEAMS
# ensure TLS is enabled along with MS Teams
#!ifndef WITH_TLS
#!define WITH_TLS
#!endif
#!endif

#!ifdef WITH_SBC
# make sure TLS is enabled for SBC
#!ifndef WITH_TLS
#!define WITH_TLS
#!endif
# make sure TRUNK is enabled for SBC
#!ifndef WITH_TRUNK
#!define WITH_TRUNK
#!endif
# make sure NAT is enabled for SBC
#!ifndef WITH_NAT
#!define WITH_NAT
#!endif
# make sure DISPATCHER is enabled for SBC
#!ifndef WITH_DISPATCHER
#!define WITH_DISPATCHER
#!endif
#!endif

# Enable outbound edge proxy - hopefully we never need this
###loadmodule "outbound"
###loadmodule "stun"

#!ifdef WITH_SCTP
loadmodule "sctp"
#!endif

#!ifdef WITH_SDPOPS
loadmodule "sdpops"
#!endif 

#!ifdef WITH_GEOIP
loadmodule "geoip2"
### License Key: tyrhLJpJiWmke42x
### wget "https://download.maxmind.com/app/geoip_download?edition_id=GeoLite2-ASN&license_key=tyrhLJpJiWmke42x&suffix=tar.gz" --output-file=aw.tar.gz
modparam("geoip2", "path", "/etc/kamailio/db/GeoLite2-Country.mmdb")
#!endif

### Notes
## rr			round route
## tm			persistent transaction
## sl_reply 	is stateless reply
## t_relay 		is transactional relay
## xlog 		syslog 
## config files: All lines that do things (instructions) have to end with a semicolon
## Comments start with # if single line or /* blah */ for multi-line
## Changes to the config only take effect when you restart Kamailio

## three types of kamilio proxies:-
## Stateless: doesn’t remember anything about the messages (sessions), no state information is kept. As soon as the proxy forwards the message, it forgets all about it.
## Transaction Stateful:  keeps state until a final response is received, and then forgets the state information after the final response.
## Dialog Stateful: keeps state information for the duration of that session (dialog).

## User cases:-
## Stateless: Load balancer, Redirection server, Manipulate headers
## Transaction Stateful:  Call charging, CDR generation, User status (Knows if on call)
## Dialog Stateful: Dispatch to destinations until successful, Call forward on Busy / No Answer, SIP Registrar

#!ifdef WITH_EXEC
loadmodule "exec"
#!endif 

#!ifdef WITH_DMQ
/* parameters */
#!substdef "!DMQ_PORT!5090!g"
#!substdef "!DMQ_SERVER!0.0.0.0!g"
#!substdef "!DMQ_NOTIFY!dmq.nickvsnetworking.com!g"
loadmodule "dmq.so"
loadmodule "dmq_usrloc.so"
# ---- dmq params ----
modparam("dmq", "server_address", "sip:DMQ_SERVER:DMQ_PORT")
modparam("dmq", "notification_address", "sip:DMQ_NOTIFY:DMQ_PORT")
modparam("dmq", "multi_notify", 1)
modparam("dmq", "num_workers", 4)
modparam("dmq", "ping_interval", 15)
modparam("dmq_usrloc", "enable", 1)
# ---- dmq-related params ----
modparam("dialog", "enable_dmq", 1)
modparam("htable", "enable_dmq", 1)
# only valid for kam ver >= 5.2
modparam("htable", "dmq_init_sync", 1)
#!endif

# Various Settings
memdbg=5
memlog=5
pv_buffer_size=65536
pv_cache_limit=65536
log_facility=LOG_LOCAL0
children=16
tcp_connection_lifetime=3605
dns=no
dns_cache_init=off
dns_srv_lb=no
dns_try_naptr=no
maxbuffer=65536
max_while_loops=250
rev_dns=no
use_dns_cache=no
auto_aliases=no
mhomed=0

## TCP always enabled
disable_tcp=no
/* life time of TCP connection when there is no traffic
 * - a bit higher than registration expires to cope with UA behind NAT */
tcp_connection_lifetime=3605
/* upper limit for TCP connections (it includes the TLS connections) */
tcp_max_connections=2048
# for use JSONRPC
tcp_accept_no_cl=yes

## Obscure
user_agent_header="User-Agent: Kamailio"
server_header="Server: Kamailio"
sip_warning=0

## Logging
#!ifdef WITH_SIPDEBUG
### eg: ngrep -d any -qt -W byline port 5060
/* LOG Levels: 3=DBG, 2=INFO, 1=NOTICE, 0=WARN, -1=ERR, ... */
debug=3
log_stderror=yes
onsend_route_reply=yes
#!else
# No Debugging
debug=2
log_stderror=no
onsend_route_reply=no
#!endif

#!ifdef WITH_SBC
log_prefix="SBC:"
#!else
log_prefix="{$mt $proto $ci} "
#!endif

# - accounting flags
#   FLT_ - per transaction (message) flags
#!define FLT_ACC 1
#!define FLT_ACCMISSED 2
#!define FLT_ACCFAILED 3
#!define FLT_NATS 5
#	FLB_ - per branch flags
#!define FLB_NATB 6
#!define FLB_NATSIPPING 7

####### Modules Section ########
loadmodule "jsonrpcs.so"
loadmodule "kex.so"
loadmodule "corex.so"
loadmodule "tm.so"
loadmodule "tmx.so"
loadmodule "sl.so"
loadmodule "stun.so"
loadmodule "outbound.so"
loadmodule "rr.so"
loadmodule "pv.so"
#!ifdef MAX_DIALOG_TIMEOUT
loadmodule "dialog.so"
#!endif
loadmodule "maxfwd.so"
loadmodule "usrloc.so"
loadmodule "registrar.so"
loadmodule "textops.so"
loadmodule "textopsx.so"
loadmodule "siputils.so"
loadmodule "xlog.so"
loadmodule "sanity.so"
loadmodule "ctl.so"
loadmodule "cfg_rpc.so"
loadmodule "acc.so"
loadmodule "counters.so"

#!ifdef WITH_HTTPCLIENT
loadmodule "http_client.so"
#!endif

#!ifdef WITH_NAT
loadmodule "nathelper.so"
loadmodule "rtpengine.so"
#!endif

#!ifdef WITH_TRUNK
loadmodule "uac.so"
#!endif

#!ifdef WITH_SPEEDDIAL
loadmodule "speeddial.so"
modparam("speeddial", "db_url", DBURL)
modparam("speeddial", "use_domain", MULTIDOMAIN)
#!endif

#!ifdef WITH_AUTH
loadmodule "auth.so"
loadmodule "auth_db.so"
#!ifdef WITH_IPAUTH
loadmodule "permissions.so"
#!endif
#!endif

#!ifdef WITH_ANTIFLOOD
loadmodule "htable.so"
loadmodule "pike.so"
#!endif

/* set it to yes to enable sctp and load sctp.so module */
#!ifdef WITH_SCTP
enable_sctp=yes
loadmodule "sctp"
#!endif

# ----------------- setting module-specific parameters ---------------
# ----- jsonrpcs params -----
modparam("jsonrpcs", "pretty_format", 1)

# ----- ctl params -----
modparam("ctl", "binrpc", "unix:/var/run/kamailio/kamailio_ctl")
modparam("ctl", "binrpc", "tcp:localhost:2046")

# ----- tm params -----
modparam("tm", "failure_reply_mode", 3)
modparam("tm", "noisy_ctimer", 1)
modparam("tm", "cancel_b_method", 1)

# ----- rr params -----
modparam("rr", "enable_full_lr", 1)
modparam("rr", "append_fromtag", 1)
modparam("rr", "ignore_sips", 1)
modparam("rr", "enable_double_rr", 2)

# ----- registrar params -----
modparam("registrar", "method_filtering", 1)
/* uncomment the next line to disable parallel forking via location */
# modparam("registrar", "append_branches", 0)
/* uncomment the next line not to allow more than 10 contacts per AOR */
# modparam("registrar", "max_contacts", 10)
/* max value for expires of registrations */
modparam("registrar", "max_expires", 3600)
/* set it to 1 to enable GRUU */
modparam("registrar", "gruu_enabled", 0)
/* set it to 0 to disable Path handling */
modparam("registrar", "use_path", 1)
/* save Path even if not listed in Supported header */
modparam("registrar", "path_mode", 0)

#!ifdef MAX_DIALOG_TIMEOUT
# ----- dialog params -----
modparam("dialog", "db_url", DBURL)
modparam("dialog", "db_mode", 0)
modparam("dialog", "enable_stats", 1)
modparam("dialog", "dlg_flag", 1)
modparam("dialog", "hash_size", 4096)
modparam("dialog", "detect_spirals", 1)
modparam("dialog", "track_cseq_updates", 1)
modparam("dialog", "default_timeout", MAX_DIALOG_TIMEOUT)
#!endif

# ----- TLS params -----
#!ifdef WITH_TLS
enable_tls=yes
/* upper limit for TLS connections */
tls_max_connections=2048
loadmodule "tls.so"
# ----- tls params -----
## modparam("tls", "config", "/etc/kamailio/tls.cfg")
# ----- tls params -----
modparam("tls", "tls_method", "TLSv1.2+")
### Note: the certificate verification will always fail if the ca_list is empty.
modparam("tls", "verify_certificate", 1)
modparam("tls", "require_certificate", 1)
modparam("tls", "private_key", "/etc/letsencrypt/live/EXTERNAL_NAME/privkey.pem")
modparam("tls", "certificate", "/etc/letsencrypt/live/EXTERNAL_NAME/fullchain.pem")
# you need a CA list -otherwise certificate validation will always fail
modparam("tls", "ca_list", "/etc/kamailio/ca_list.pem")
## modparam("tls", "tls_disable_compression", 0) # enable
# Create CA list:
# for f in /etc/ssl/certs/*.pem ; do cat "$f" >> /etc/kamailio/ca_list.pem ; done
#!endif

#!ifdef WITH_NAT
# ----- rtpengine params -----
modparam("rtpengine", "rtpengine_sock", "udp:127.0.0.1:2223")
#####
modparam("rtpengine", "rtpengine_disable_tout", 15)
modparam("rtpengine", "rtpengine_tout_ms", 2000)
modparam("rtpengine", "rtpengine_retr", 2)
#####
modparam("nathelper", "natping_interval", 30)
modparam("nathelper", "ping_nated_only", 1)
modparam("nathelper", "sipping_bflag", FLB_NATSIPPING)
modparam("nathelper", "sipping_from", "sip:pinger@kamailio.org")
# params needed for NAT traversal in other modules
modparam("nathelper|registrar", "received_avp", "$avp(RECEIVED)")
modparam("usrloc", "nat_bflag", FLB_NATB)
## Examples:
### kamcmd rtpengine.show all

#### modprobe xt_RTPENGINE
#### iptables -I INPUT -p udp -j RTPENGINE --id 0
#### ip6tables -I INPUT -p udp -j RTPENGINE --id 0
#### ensure that the table we want to use doesn’t exist – usually needed after a daemon restart, otherwise will error
#### echo 'del 0' > /proc/rtpengine/control
#### /usr/sbin/rtpengine --table=0 --interface=20.190.118.9 --listen-ng=127.0.0.1:2223 --tos=184 --pidfile=/run/rtpengine.pid --no-fallback
#!endif

#!ifdef WITH_ANTIFLOOD
# ----- pike params -----
modparam("pike", "sampling_time_unit", 2)
modparam("pike", "reqs_density_per_unit", 16)
modparam("pike", "remove_latency", 4)

# ----- htable params -----
/* ip ban htable with autoexpire after 5 minutes */
modparam("htable", "htable", "ipban=>size=8;autoexpire=14400")
#!endif

#!ifdef WITH_APIBAN
modparam("rtimer", "timer", "name=apiban;interval=300;mode=1;")
modparam("rtimer", "exec", "timer=apiban;route=APIBAN")
modparam("htable", "htable", "apiban=>size=11;")
modparam("htable", "htable", "apibanctl=>size=1;initval=0;")
#!endif

#!ifdef WITH_DEBUG
loadmodule "debugger.so"
# ----- debugger params -----
modparam("debugger", "cfgtrace", 1)
modparam("debugger", "log_level_name", "exec")
loadmodule "siptrace"
modparam("siptrace", "db_url", DBURL)
# modparam("siptrace", "duplicate_uri", "sip:127.0.0.1:9060")
modparam("siptrace", "hep_mode_on", 1)
modparam("siptrace", "trace_to_database", 0)
modparam("siptrace", "trace_flag", 22)
modparam("siptrace", "trace_on", 1)
## kamcmd siptrace.status on
## kamcmd siptrace.status off
## kamcmd siptrace.status check
#!endif

#!ifdef WITH_TRUNK
## address to be used to build contact address. Must be at least host part, can have port and parameters
## Must not include 'sip:'.
## The username part of the Contact: URI will be the L_UUID field in the database.
modparam("uac", "restore_mode", "none")
modparam("uac", "reg_db_url", DBURL)
modparam("uac", "reg_db_table", "uacreg")
modparam("uac", "reg_timer_interval", 60)
modparam("uac", "reg_retry_interval", 120)
modparam("uac", "reg_keep_callid", 1)
modparam("uac", "reg_gc_interval", 30)
#modparam("uac", "credential", "username:domain:password")
modparam("uac", "auth_realm_avp", "$avp(arealm)")
modparam("uac", "auth_username_avp", "$avp(auser)")
modparam("uac", "auth_password_avp", "$avp(apass)")
modparam("uac", "reg_contact_addr","EXTERNAL_NAME:SIP_PORT")
#!endif

# ----- usrloc params -----
modparam("usrloc", "timer_interval", 60)
modparam("usrloc", "timer_procs", 1)
modparam("usrloc", "use_domain", MULTIDOMAIN)
/* enable DB persistency for location entries */
#!ifdef WITH_USRLOCDB
modparam("usrloc", "db_url", DBURL)
modparam("usrloc", "db_mode", 2)
#!endif

# ----- auth_db params -----
#!ifdef WITH_AUTH
modparam("auth_db", "db_url", DBURL)
modparam("auth_db", "calculate_ha1", yes)
modparam("auth_db", "password_column", "password")
modparam("auth_db", "load_credentials", "")
modparam("auth_db", "use_domain", MULTIDOMAIN)

# ----- auth params -----
modparam("auth", "nonce_count", 1) # enable nonce_count support
modparam("auth", "qop", "auth")  # enable qop=auth
modparam("auth", "nonce_expire", 60)  # set nonce expire to 60 seconds
modparam("auth", "nonce_auth_max_drift", 2)

# ----- permissions params -----
#!ifdef WITH_IPAUTH
deliberate syntax error
##modparam("permissions", "db_url", DBURL)
##modparam("permissions", "load_backends", 1)
modparam("permissions", "default_allow_file", "permissions.allow")
modparam("permissions", "default_deny_file", "permissions.deny")
#!endif
#!endif

#!ifdef WITH_APIBAN
# APIBAN needs HTTP client (for API call)
#!ifndef WITH_HTTPCLIENT
#!define WITH_HTTPCLIENT
#!endif
#!endif

#!ifdef WITH_HTTPCLIENT
# do not follow redirects
modparam("http_client", "httpredirect", 0)
modparam("http_client", "connection_timeout", 4)
modparam("http_client", "verify_peer", 0)
modparam("http_client", "verify_host", 0)
modparam("http_client", "keep_connections", 1)
#!endif

#----- acc params -----
/* what special events should be accounted ? */
modparam("acc", "early_media", 0)
modparam("acc", "report_ack", 0)
modparam("acc", "report_cancels", 0)
/* by default ww do not adjust the direct of the sequential requests.
 * if you enable this parameter, be sure the enable "append_fromtag"
 * in "rr" module */
modparam("acc", "detect_direction", 0)
/* account triggers (flags) */
modparam("acc", "log_flag", FLT_ACC)
modparam("acc", "log_missed_flag", FLT_ACCMISSED)
modparam("acc", "log_extra",
	"src_user=$fU;src_domain=$fd;src_ip=$si;"
	"dst_ouser=$tU;dst_user=$rU;dst_domain=$rd")
modparam("acc", "failed_transaction_flag", FLT_ACCFAILED)
/* enhanced DB accounting -- need additional tables */
modparam("acc", "db_flag", FLT_ACC)
modparam("acc", "db_missed_flag", FLT_ACCMISSED)
modparam("acc", "db_url", DBURL)
modparam("acc", "db_extra",
	"src_user=$fU;src_domain=$fd;src_ip=$si;"
	"dst_ouser=$tU;dst_user=$rU;dst_domain=$rd")

# ----- usrloc params -----
modparam("usrloc", "timer_interval", 60)
modparam("usrloc", "timer_procs", 1)
modparam("usrloc", "use_domain", MULTIDOMAIN)
/* enable DB persistency for location entries */
#!ifdef WITH_USRLOCDB
modparam("usrloc", "db_url", DBURL)
modparam("usrloc", "db_mode", 2)
#!endif

## Dispatcher

## MS Voice System detects if the SBC is working in two ways:
##
## MS periodically probes with SIP OPTIONS requests, and
## we need to he SBC probes periodically the MS infrastructure
## with SIP OPTIONS request
## So we need to setup Kamailio to support this.
## If you use the default kamailio.cfg then Kamailio should already 
## be replying to SIP OPTIONS with a status 200 "Keepalive" reply.
## So the first part is already solved.
## For the second part we will use the dispatcher module
#!ifdef WITH_DISPATCHER
loadmodule "dispatcher.so"
# modparam("dispatcher", "db_url", DBURL)                 #Use DBURL variable for database parameters
modparam("dispatcher", "list_file", "/etc/kamailio/dispatcher.list") #Use file list of dispatch points
modparam("dispatcher", "ds_probing_mode", 1)            #Keeps pinging gateways when state is known (to detect change in state)
modparam("dispatcher", "ds_ping_interval", 60)          #How often to ping destinations to check status
modparam("dispatcher", "ds_ping_reply_codes", "code=200;code=403") # allow 403 forbidden to be taken as success
#modparam("dispatcher", "ds_ping_method", "OPTIONS")     #Send SIP Options ping
#modparam("dispatcher", "ds_probing_threshold", 10)      #How many failed pings in a row do we need before we consider it down
#modparam("dispatcher", "ds_inactive_threshold", 10)     #How many sucessful pings in a row do we need before considering it up
modparam("dispatcher", "ds_ping_latency_stats", 1)      #Enables stats on latency
modparam("dispatcher", "ds_ping_interval", 120)		   # Seconds between pinging inactive
# modparam("dispatcher", "ds_ping_from", "sip:ping@XXXX-XXXX") # From-address of OPTIONS pings
#!endif

# ----- dialplan -----
#!ifdef WITH_DIALPLAN
### xlog("L_ERROR","rU before dialplan translation is $rU");
### dp_translate("2", "$rU/$rU");
### xlog("L_ERROR","rU after dialplan translation is $rU");

### with dialplan module
# dpid = Dialplan ID. This means we can have multiple dialplans, each with a unique dialplan ID. When testing we’ll always need to specific the dialplan ID we’re using to make sure we’re testing with the right rules.
# priority = dialplan allow us to have different weighted priorities. For example we might want a match all wildcard entry, but more specific entries with lower values. We don’t want to match our wildcard failover entry if there’s a more specific match, so we use priorities to run through the list, first we try and match the group with the lowest number, then the next lowest and so on, until a match is found.
# match_op = Match Operation. There are 3 options:
## 0 – string comparison;
## 1 – regular expression matching (pcre)  <-- use this
## 2 – fnmatch (shell-like pattern) matching
#
# In our first example we had match_op set to 0, so we exactly matched “StringA”. The real power comes from Regex Matching, which we’ll cover soon.
#
# match_exp = Match expression. When match_op is set to 0 this matches exactly the
#             string in match_exp, when match_op is set to 1 this will contain a
#             regular expression to match.
# match_len = Match Length. Allows you to match a specific length of string.
# subst_exp = Substitute Expression. If match_op is set to 0 this will contain be empty
#             If match_op is 1 this will contain the same as match_exp.
# repl_exp  = Replacement expression. If match_op is set to 0 this will contain the
#             string to replace the matched string.
# attrs     = Often used as a descriptive name for the matched rule.

# dpid=3, pr=1, match_op=1, match_exp=xxx,match_len=0, subst_exp=yyy, repl_exp-

loadmodule "dialplan.so"
modparam("dialplan", "db_url", DBURL);    #Dialplan database from DBURL variabl
## dialplan.reload
## dialplan.dump 1             
## https://nickvsnetworking.com/kamailio-bytes-dialplan-module/
#!endif

### format listen variable: listen=[proto]:[localip]:[lport] advertise [publicip]:[pport]
#!ifdef WITH_NAT
listen=udp:PRIVATE_IP:SIP_PORT advertise EXTERNAL_IP:SIP_PORT
#!else
listen=udp:PRIVATE_IP:SIP_PORT
#!endif

#!ifdef WITH_SCTP
#!ifdef WITH_NAT
listen=sctp:PRIVATE_IP:SIP_PORT advertise EXTERNAL_IP:SIP_PORT
#!else
listen=sctp:PRIVATE_IP:SIP_PORT
#!endif
#!endif

#!ifdef WITH_TLS
#!ifdef WITH_NAT
listen=tls:PRIVATE_IP:SIPS_PORT advertise EXTERNAL_IP:SIPS_PORT
#!else
listen=tls:PRIVATE_IP:SIPS_PORT
#!endif
#!endif

#!ifdef WITH_WEBSOCKETS
#!ifdef WITH_NAT
listen=tcp:PRIVATE_IP:WS_PORT advertise EXTERNAL_IP:WS_PORT
#!else
listen=tcp:PRIVATE_IP:WS_PORT
#!endif
#!ifdef WITH_TLS
#!ifdef WITH_NAT
listen=tls:PRIVATE_IP:WSS_PORT advertise EXTERNAL_IP:WSS_PORT
#!else
listen=tls:PRIVATE_IP:WSS_PORT
#!endif 
#!endif 

alias="EXTERNAL_NAME"
auto_aliases=no
#!endif 
