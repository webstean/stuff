
/* inside route {} */

route[FLAGS_INFO] {

	## Less noise
	if (is_method("REGISTER")) {
		return ;
	}

	## Transaction Flags
	xlog("L_ERROR", "****=== FLAG INFO ===***");
	xlog("L_ERROR", "**Method (rm)  : $rm [$hdr(User-Agent)]");
	xlog("L_ERROR", "**Source (su)  : $su");
		
	if (isflagset(FLT_SRC_WS)) {
		xlog("L_ERROR", "****Source Proto: WebRTC ");
	}
	if (isflagset(FLT_SRC_SIP)) {
		xlog("L_ERROR", "****Source Proto: SIP ($rp)");
	}
	xlog("L_ERROR", "**Dest (tu)    : $tu");
	

#!ifdef WITH_MSTEAMS
	## Teams Branch Flags
	if (isbflagset(FLB_SRC_MSTEAMS)) {
		xlog("L_ERROR", "****Source (Branch) : Microsoft Teams");
	}
	if (isbflagset(FLB_SRC_MSTEAMS_ONHOLD)) {
		xlog("L_ERROR", "****Source (Branch) : Microsoft Teams (ON-HOLD)");
	}
	if (isbflagset(FLB_DST_MSTEAMS)) {
		xlog("L_ERROR", "****Routing Destination (Branch): Microsoft Teams");
	}
#!endif

	if (isbflagset(FLB_DST_ALBERT)) {
		xlog("L_ERROR", "****Routing Destination (Branch): Albert Park");
	}
	
	if (isbflagset(FLB_DST_SOMERS)) {
		xlog("L_ERROR", "****Routing Destination (Branch): Somers");
	}
	
	xlog("L_ERROR", "Finished FLAGSINFO");
	return ;
}

# set applicable flags
route[FLAGS] {
	# Check the type of UAC
	if ($pr == "ws" || $pr == "wss") {
		setflag(FLT_SRC_WS);
	} else {
		setflag(FLT_SRC_SIP);
	}
	if (isflagset(FLT_SRC_WS)) {
		setbflag(FLB_WS_DEVICE);
	}

#!define WITH_PABX
	# LSCPH Destination Handling
	if ($tU =~ "$var(albert)") {
        setbflag(FLB_DST_ALBERT);
	}
    if ($tU =~ "$var(somers)") {
        setbflag(FLB_DST_SOMERS);
	}
#!endif
    
#!ifdef WITH_MSTEAMS
	# Source is MSTEAMS and is active
	if ($hdr(User-Agent) =~ "Microsoft.PSTNHub") {
		setbflag(FLB_SRC_MSTEAMS);
	}
		
	# Source is MSTEAMS but call is onhold
	if (is_method("INVITE") && $hdr(User-Agent) =~ "Microsoft.PSTNHub" && $avp(sdp_media_direction) == "inactive") {
		setbflag(FLB_SRC_MSTEAMS_ONHOLD);
    }
	
	# Destination is Microsoft Teams
	if ($rd =~ "pstnhub.microsoft.com") {
		setbflag(FLB_DST_MSTEAMS);
##		# Create proper SIP Contact Record for MSTEAMS - otherwise you'll get forbidden
##		if ($(ct{tobody.user})!=$null) {
##			$var(ctuser) = $(ct{tobody.user});
##			$var(cthost) = $si;
##			$var(ctport) = $sp;
##			remove_hf("Contact");
##			insert_hf("Contact: <sip:$var(ctuser)@$var(cthost):$var(ctport)");
##			xlog("L_INFO","Changed contact for MSTEAMS: <sip:$var(ctuser)@$var(cthost):$var(ctport)");
##		}
	}

	# use RTPE for WS and MSTEAMS
	if (isbflagset(FLB_WS_DEVICE) || isbflagset(FLB_SRC_MSTEAMS) || isbflagset(FLB_SRC_MSTEAMS_ONHOLD) || isbflagset(FLB_DST_MSTEAMS)) {
    #    # WebRTC destination or MSTEAMS source
        setflag(FLT_USE_RTPE);
    }
#!endif

	# setflag(RECORD_CALL);
	return ;
}


	# transcode everything to Opus
#	$var(rtpengine_codec) = "mask-all transcode-opus";
	
	# transcode everything to G729
#	$var(rtpengine_codec) = "codec-strip=all codec-offer=G729 codec-offer=telephone-event";

#	$var(rtpengine_flags) = "ICE=force-relay DTLS=passive";

	# nat_uac_test("8"): The SDP is searched for occurrence of RFC1918 (Private Address Space) or RFC6598 (Carrier Grade NAT) addresses
	#if(nat_uac_test("8")) {
	#	rtpengine_manage("$var(rtpengine_conn)" + "replace-origin replace-session-connection ICE=remove "    + "$var(rtpengine_codec)");
	#} else {
	#	rtpengine_manage("$var(rtpengine_conn)" + "trust-address replace-origin replace-session-connection " + "$var(rtpengine_codec)");
	#}
		
	# replace-origin - flags that IP from the origin description (o=) should be also changed.
	# trust-address - flags that IP address in SDP should be trusted. ignores address in the SDP and uses source address of the SIP message as media address which is passed to the RTP proxy.
	# replace-session-connection - flags to change the session-level SDP connection (c=) IP if media description also includes connection information.
	# ICE=... - controls the RTP proxy's behaviou
	#     “force” - discard any ICE attributes already present in the SDP body and then generate and insert new ICE data, leaving itself as the only ICE candidates; “force-relay” - discard any “relay” type ICE attributes already present in the SDP body and then generate and insert itself as the only ICE “relay” candidates;
	#     “remove” instructs the RTP proxy to discard any ICE attributes and not insert any new ones into the SDP.
	#     The default (if no “ICE=...” is given at all), new ICE data will only be generated if no ICE was present in the SDP originally; otherwise the RTP proxy will only insert itself as additional ICE candidate. Other SDP substitutions (c=, m=, etc) are unaffected by this flag.
	#
	#

	# unencrypted via UDP (UDP/RTP/AVP) -  Everything else
	# unencrypted via TCP (TCP/RTP/AVP) - 3CX at Somers and Albert Park
	# MSTEAMS encrypted via SLS (RTP/SAVP)
	# WEBRTC Bridge RTP/AVP <-> RTP/SAVPF

	# strip all codecx and rewrite with G729
	# example: codec-strip=all codec-offer=G729 codec-offer=telephone-event
	# G.729 when bandwidth must be conserved. 
		
	# any sdp changes - 

	# to instruct rtpengine to translate the SDP to plain RTP when sending to Asterisk.
	# The appropriate flag to use in this case would be `RTP/AVP`

	# RTP/AVP - Real-time Transport Protocol / Audio Video Profile TCP/RTP/AVP
	# RTP/AVPF - Extended RTP Profile for RTCP-based Feedback (Audio-Visual Profile with Feedback)
	# RTP/SAVP - Real-time Transport Protocol / Secure Audio Video Profile (over DTLS) DCCP/TLS/RTP/SAVP
	# RTP/SAVPF - Extended Secure RTP Profile for RTCP-based Feedback (over DTLS) DCCP/TLS/RTP/SAVPF


route[RTPOFFER] {
#!ifdef WITH_NAT
	if (!has_body("application/sdp")) return ;

	# - WebRTC to WebRTC (offer)
	if (isflagset(FLT_SRC_WS) && isbflagset(FLB_WS_DEVICE)) {
		xlog("L_INFO", "RTPEngine Offer $su - $tu WebRTC to WebRTC");
		$var(reflags) = "tag webrtc-to-webrtc    trust-address replace-origin replace-session-connection SDES-off ICE=force";
	}
	# - ELSE WebRTC to SIP (offer)
	else if (isflagset(FLT_SRC_WS)) {
		xlog("L_INFO", "RTPEngine Offer $su - $tu WebRTC to SIP");
		$var(reflags) = "tag webrtc-to-sip       trust-address replace-origin replace-session-connection rtcp-mux-demux ICE=remove RTP/AVP";
	}
	# - SIP to WebRTC (offer)
	else if (isbflagset(FLB_WS_DEVICE)) {
		xlog("L_INFO", "RTPEngine Offer $su - $tu SIP to WebRTC");
		$var(reflags) = "tag sip-to-web          trust-address replace-origin replace-session-connection rtcp-mux-offer ICE=force transcode-PCMU transcode-G722 SDES-off UDP/TLS/RTP/SAVP";
	}
	# - MSTEAMS to SIP (offer)
	else if (isbflagset(FLB_SRC_MSTEAMS)) {
		xlog("L_INFO", "RTPEngine Offer $su - $tu MSTEAMS to SIP");
		$var(reflags) = "tag teams-to-sip        trust-address replace-origin replace-session-connection rtcp-mux-offer ICE=remove RTP/AVP";
	}
	# - MSTEAMS to SIP [ONHOLD] (offer)
	else if (isbflagset(FLB_SRC_MSTEAMS_ONHOLD)) {
		xlog("L_INFO", "RTPEngine Offer $su - $tu SIP to MSTEAMS -Onhold");
		$var(reflags) = "tag teams-to-sip-onhold trust-address replace-origin replace-session-connection rtcp-mux-accept ICE=remove RTP/AVP";
	}
	# - SIP to MSTEAMS (offer)
	else if (isbflagset(FLB_DST_MSTEAMS)) {
		xlog("L_INFO", "RTPEngine Offer $su - $tu SIP to MSTEAMS");
		$var(reflags) = "tag sip-to-teams        trust-address replace-origin replace-session-connection rtcp-mux-offer ICE=force transcode-PCMU transcode-G722 RTP/SAVP";
	}
	# - SIP to Somers [TCP] (offer)
	else if (isbflagset(FLB_DST_ALBERT|FLB_DST_SOMERS)) {
		xlog("L_INFO", "RTPEngine Offer $su - $tu SIP to Somers/Albert Park");
		$var(reflags) = "tag sip-to-somers       trust-address replace-origin replace-session-connection rtcp-mux-offer ICE=force transcode-PCMU transcode-G722 TCP/RTP/SAVP";
	}
	# - SIP to SIP (offer)
	else {
		xlog("L_INFO", "RTPEngine Offer $su - $tu SIP to SIP");
		$var(reflags) = "tag sip-to-sip          trust-address replace-origin replace-session-connection rtcp-mux-demux ICE=remove RTP/AVP";
	}`

    xlog("L_INFO", "RTP [$rm] - OFFER  : $var(reflags)");
	rtpengine_offer("$var(reflags)");
#!endif
	return ;
}

/* inside reply_route {} */
route [RTPANSWER] {
#!ifdef WITH_NAT
	if (!has_body("application/sdp")) return ;
	
	# - WebRTC to WebRTC (answer)
	if (isflagset(FLT_SRC_WS) && isbflagset(FLB_WS_DEVICE)) {
		xlog("L_INFO", "RTPEngine Answer $su - $tu WebRTC to WebRTC");
		$var(reflags) = "tag web-to-web 		trust-address replace-origin replace-session-connection SDES-off ICE=force";
	}
	# - WebRTC to SIP (answer) - decrypt
	else if (isflagset(FLT_SRC_WS)) {
		xlog("L_INFO", "RTPEngine Answer $su - $tu WebRTC to SIP");
		$var(reflags) = "tag web-to-sip 		trust-address replace-origin replace-session-connection rtcp-mux-require ICE=force RTP/SAVPF";
	}
	#
	# - MSTEAMS to SIP (answer) -decrypt
	else if (isbflagset(FLB_SRC_MSTEAMS)) {
		xlog("L_INFO", "RTPEngine Answer $su - $tu MSTEAMS to SIP");
		$var(reflags) = "tag sip-to-teams 		trust-address replace-origin replace-session-connection rtcp-mux-require ICE=force transcode-PCMU transcode-G722 SDES-off RTP/SAVP";
		#$var(reflags) = "trust-address replace-origin replace-session-connection rtcp-mux-offer ICE=force SDES-off RTP/SAVP";
	}
	# - SIP to MSTEAMS (answer) -decrypt
	else if (isbflagset(FLB_DST_MSTEAMS)) {
		xlog("L_INFO", "RTPEngine Answer $su - $tu SIP to MSTEAMS");
		$var(reflags) = "tag teams-to-sip 		trust-address replace-origin replace-session-connection rtcp-mux-offer ICE=remove RTP/AVP";
	} 
	# - SIP to MSTEAMS ONHOLD (answer) - decrypt
	else if (isbflagset(FLB_SRC_MSTEAMS_ONHOLD)) {
		xlog("L_INFO", "RTPEngine Answer $su - $tu SIP to MSTEAMS (Onhold)");
		$var(reflags) = "tag sip-to-team-onhold trust-address replace-origin replace-session-connection ICE=remove  transcode-PCMU transcode-G722 SDES-off RTP/SAVP";
		#$var(reflags) ="tag sip-to-team-onhold trust-address replace-origin replace-session-connection rtcp-mux-offer ICE=force SDES-off RTP/SAVP";
	}
	# - SIP to Somers [TCP] (answer)
	else if (isbflagset(FLB_DST_ALBERT|FLB_DST_SOMERS)) {
		xlog("L_INFO", "RTPEngine Answer $su - $tu SIP to Somers");
		$var(reflags) = "tag sip-to-somers     trust-address replace-origin replace-session-connection ICE=remove  transcode-PCMU transcode-G722 SDES-off TCP/RTP/SAVP";
	}
	# - SIP to SIP (answer)
	else {
		xlog("L_INFO", "RTPEngine Answer $su - $tu SIP to SIP");
		$var(reflags) = "tag sip-to-sip 		trust-address replace-origin replace-session-connection rtcp-mux-demux ICE=remove RTP/AVP";
	}

    xlog("L_INFO", "RTP [$rm] - ANSWER : $var(reflags)");
	rtpengine_answer("$var(reflags)");
#!endif
	return ;
}

