# Demonstration Kamailio Configuration for AlpineLinux


#--------------------------------------------------------
# Section 1:  Global Definitions
#--------------------------------------------------------
#increase debug verbosity with 5, 
debug			=	3

fork			=	yes
log_stderror		=	no

#disable "listen" to avoid confusion with advertised IP address
#listen			=	0.0.0.0
port			=	5060
children		=	4

dns			=	no
rev_dns			=	no

mpath			= 	"/usr/lib/kamailio/modules/"

server_header   	=       "Server: AlpineLinux SIP Server"
user_agent_header	=	"User-Agent: AlpineLinux SIP Server"

tos			=	0x60

#--------------------------------------------------------
# Section 2:  Modules
#--------------------------------------------------------

loadmodule "sl.so"
loadmodule "tm.so"		
loadmodule "rr.so"
	modparam ( "rr", "enable_full_lr", 1 )
loadmodule "maxfwd.so"
loadmodule "usrloc.so"
	modparam("usrloc", "db_mode", 2) 
	modparam("usrloc", "db_url", "postgres://openser:openserrw@localhost/openser")
loadmodule "registrar.so"
loadmodule "mi_fifo.so"
	modparam ( "mi_fifo", "fifo_name", "/var/run/kamailio/kamailio_fifo")
loadmodule "pv.so"
loadmodule "uac.so"
loadmodule "avpops.so"
loadmodule "db_postgres.so"
loadmodule "auth.so" 
loadmodule "auth_db.so"
	modparam("auth_db", "calculate_ha1", yes) 
	modparam("auth_db", "password_column", "password") 
	modparam("auth_db", "db_url", "postgres://openser:openserrw@localhost/openser")
	modparam("auth_db", "load_credentials", "") 
loadmodule "xlog.so"
	modparam ("xlog", "buf_size", 8192)
loadmodule "dialog.so"
	modparam("dialog", "default_timeout", 43200 )
	modparam("dialog", "db_mode", 0 ) # no database writes
	modparam("dialog", "dlg_flag", 3 )
	modparam("dialog", "hash_size",  4096 )
loadmodule "siputils.so"
loadmodule "enum.so"
	modparam("enum", "domain_suffix", "enum.jwm2.net.")
loadmodule "siputils.so"
loadmodule "textops.so"
loadmodule "sqlops.so"
	modparam ( "sqlops", "sqlcon", "sqlconn=>postgres://openser:openserrw@localhost/openser")
loadmodule "presence.so"
	modparam("presence", "db_url", "postgres://openser:openserrw@localhost/openser")
	modparam("presence", "max_expires", 3600)
loadmodule "presence_xml.so"
	modparam("presence_xml", "db_url", "postgres://openser:openserrw@localhost/openser")
	modparam("presence_xml", "force_active", 1)
loadmodule "presence_mwi.so"
loadmodule "presence_dialoginfo.so"


#--------------------------------------------------------
# Section 1:  Main Route Block 
#--------------------------------------------------------

route	
{
	#--------------------------------------------------------
	# Section 1a:  Script variables
	#--------------------------------------------------------

	# Access codes to make non-local calls
	# Note, these are not regular expressions, but literal strings
	$var(B2BAccess)			=	"*11";
	$var(B2PSTNAccess)		=	"*22";


	# PSTN GW Infoprmation = UAC is the user we connect to Asterisk with
	$var(PSTN_UAC)			=	"ast.qcslink.com";
	$var(PSTN_GW)			=	"ast.qcslink.com";
	
	# These flags turn on optionsal routes
	# $var(NumPinDigits)		=	9;
	# $var(OutsideLine)             =       0;
	$var(RouteOfLastResort) 	=	"ast.qcslink.com";    	

	# If you leave the following commented out, 
	# time_condition table defaults to local clock time (typically UTC)
	# $var(LocalTimeZone)		= 	"America/Los_Angeles";

	# Do not change DialogStatus - this is used internally
	$var(DialogStatus) 		= 	"";

	# Define FLAGS (0-31) here, if you use them
	# 1 - This is a BYE, so we need to do dialog accounting
	# 2 - (available - not currently used)
	# 3 - Reserved for marking a transaction with the Dialog module

	#--------------------------------------------------------

	#Protection against cycles and too big packets
        if (!mf_process_maxfwd_header("30")) {
		sl_send_reply("483", "Too Many Hops");
		return;
	}
        if (msg:len > max_len) {
                sl_send_reply("513", "Message Overflow");
                return;
	}

	# xlog("L_INFO","New Message: $rm: $fu ($fn $si:$sp) -> $ru ($tn $Ri:$Rp)\n");

	# Handle the messages as needed
 	route(1);
 		
	# If there is a route set honor it
	if (has_totag()) {
		loose_route();
	}

	#otherwise attempt to relay the packet
	if (!t_relay()) {
		sl_reply_error();
	}

	# Dialog accounting
	if (isflagset(1)) {
		$var(DialogStatus) = "Completed";
		route(40);
	}

}

#--------------------------------------------------------
# Section 2:  Secondary Route Blocks
#--------------------------------------------------------

# Handle messages sent to this www directly

route[1] 
	{
	# Note - if the case does not end with an "exit" - the message will
	# be processed further in the main route block - typically - routed on

	#For methods, see http://www.iana.org/assignments/sip-parameters

		switch ($rm) 
			{
			# RFC 3261
      			case "ACK" :
				if ( !t_check_trans() ) {
					# Random ack with no transaction - discard
					xlog ("WARNING: $fu sent an ACK with no associated transaction");
					exit;
				}
				# route(21);
				break;

			#RFC 3261
			case "BYE" :
				setflag(1);
				# route(22);
				break;

			#RFC 3621
			case "CANCEL" :
				# route(23);
				break;
			
			#RFC 2976
			case "INFO" :
				# route(24);
				break;

			#RFC 3621
			case "INVITE" :
				# We want to continue to be in the conversation
				# Record-Route headers are inserted at the first request of the first transaction
				record_route();

				# Update any exiting dialog timers
				dlg_manage();

				if (!has_totag()) {
					$dlg_ctx(timeout_route) = 41;
				}
				route(25);
				break;
				
			#RFC 3428
			case "MESSAGE" : 
				# route(26);
				break;

			# Expired RFC Draft
			# See: http://quimby.gnus.org/internet-drafts/draft-fwmiller-ping-03.txt
			# However, Polycom Phones seem to like to send them
	      		case "PING" :
				sl_send_reply("200", "OK");
				# route(27);
				exit;
	      			break;
      			
			#RFC 3265
			case "NOTIFY" :
				# route(28);
				break;

			#RFC 3261
			case "OPTIONS" :
				sl_send_reply("200", "OK");
				# route(29);
				break;

			#RFC 3252
			case "PRACK" :
				# route(30);
				break;

			#RFC 3903
			case "PUBLISH" :
				route(31);
				break;

			#RFC3515
			case "REFER" :
				# route(43);
				break;

			#RFC 3261
      			case "REGISTER" :
	      			route(33);
	      			exit;
	      			break;

			#RFC 3265
			case "SUBSCRIBE" :
				# Subscribe is cool for blinking the message indicator
				# lite on the phone, or call-back - but we do not 
				# support that yet
				# route(50);	# unimplemented
				route(34);
				exit;
				break;

			#RFC 3311
			case "UPDATE" :
				# route(35);
				break;

      			default : 
	      			xlog ("ERROR: $fu sent $rm - unimplmented\n");
	      			route(50);	# unimplemented
	      			exit;
			}
			
	return;
}


#----------------------------------------------------------
# Route 20-39 - Various SIP Method Handlers
#----------------------------------------------------------

# INVITE
route[25] {
	# B2B Calls
	if ( $(ru{s.substr,4,$(var(B2BAccess){s.len})}) == $var(B2BAccess) ) {
		xlog ("L_INFO", "This is a B2B call");
	
		# Check proxy authorization
		route(56);

		$var(a) = $(var(B2BAccess){s.len}) + 4;	
		$ru = "sip:+" + $(ru{s.substr,$var(a),0});

		xlog ("L_INFO", "Looking up $ru");
		if(enum_query()) {
			xlog ("L_INFO", "The new address is $ru");
			# xlog ("L_INFO", "Rewritten B2B Message: $rm: $fu ($fn $si:$sp) -> $ru ($tn $Ri:$Rp)\n");

			return;
		} else {
			xlog ("L_INFO", "The enum lookup failed for $ru\n");
		        sl_send_reply("404", "User Not Found");
			exit;
		}
	}
	
	# PSTN Calls 
	if ( $(ru{s.substr,4,$(var(B2PSTNAccess){s.len})}) == $var(B2PSTNAccess) ) {
		xlog ("L_INFO", "This is a PSTN call");

		# check proxy authororization
		route(56);

		$var(a) = $(var(B2PSTNAccess){s.len}) + 4;
		$ru = "sip:" + $(ru{s.substr,$var(a),0});

		# check User Access PIN
		if ($var(NumPinDigits)) {
			route(43);
		}

		# Rewrite request to go to the PSTN GW Box
		# uac_replace_from("$var(PSTN_UAC)");
		$ru = "sip:" + $rU + "@" + $var(PSTN_GW) + ":" + "5060";

		# xlog ("L_INFO", "Rewritten PSTN Message: $rm: $fu ($fn $si:$sp) -> $ru ($tn $Ri:$Rp)\n");

		return;
	}

	# ----- Anything below this should be a local number

	route(42);	# Time conditions check

	# If local, route (authorization is not needed)
	if (lookup("location") && ($fU != $rU)) {
		return;
	} else {
		# Otherwise if we have a route of last resort (legacy Asterisk Server)
		# Route it that way; otherwise, just give up
		if ($var(RouteOfLastResort)) {
			$ru = "sip:" + $rU + "@" + $var(RouteOfLastResort) + ":" + "5060";

			# xlog ("L_INFO", "Rewritten Message: $rm: $fu ($fn $si:$sp) -> $ru ($tn $Ri:$Rp)\n");
		} else {
			sl_send_reply("404", "User Not Found");
			exit;
		}
	}

	return;
}


# PUBLISH
route[31] {
	# Absorb retransmissions
	if (!t_newtran()) {
		sl_reply_error();
		exit;
	}

	if($hdr(Sender)!= NULL)
		handle_publish("$hdr(Sender)");
	else
		handle_publish("$fu");

	t_release();

	return;
}


# REGISTER
route[33] {
	# Only authorized users can register
	route (55);

	#Save user information in database
	if (!save("location")) {
		sl_reply_error();
	}

	return;
}


# SUBSCRIBE
route[34] {
	# Absorb retransmissions
	if (!t_newtran()) {
		sl_reply_error();
		exit;
	}

	handle_subscribe();

	t_release();

	return;
}


#----------------------------------------------------------
# Route 40-49 - Value Add Rules
#----------------------------------------------------------

# Record Dialog in CDR SQL table
route[40] {
	xlog ("L_INFO", "Recording call details");

	$var(elapsed) = ( $Ts - $dlg(start_ts));

        sql_query ( "sqlconn", "insert into cdr ( status, callid, 
		f_user, f_domain, f_contact, f_uri,
		t_user, t_domain, t_contact, t_uri, start_ts, end_ts, elapsed )  
		values ( '$var(DialogStatus)', '$dlg(callid)', 
		'$fU', '$fd', '$dlg(from_contact)', '$dlg(from_uri)', 
		'$tU', '$td', '$dlg(to_contact)', '$dlg(to_uri)',
		'$dlg(start_ts)', '$Ts', '$var(elapsed)')", "this_trans");

        sql_result_free ("this_trans");

	return;
}

# Record Timeout in CDR table
route[41] {
	$var(DialogStatus) = "Timed Out";
	route(40);
}

# Check SQL Table for Time Conditions
route[42] {
	xlog ("L_INFO", "Checking time conditions");

	if ($(var(LocalTimeZone){s.len}) >0 ) {
		$var(tcq) = "SET TIME ZONE '" + $var(LocalTimeZone) + "';\n";
	} else {
		$var(tcq) = "";
	}

	sql_query ( "sqlconn", "$var(tcq)  select cast(time.ts as varchar(20)), tc.id, 
				time.dow, tc.addr, tc.repl from
				time_condition tc inner join ( select LOCALTIME as ts,
				cast ( 2^ extract ( 'isodow' from CURRENT_DATE ) as int ) as dow ) as time
				on tc.addr = '$rU' and 
				tc.enabled = true and
				time.ts >= tc.start_t and
				time.ts <= tc.end_t and
				(dow & tc.dayofweek) > 0
				order by tc.start_t desc
				limit 1", "ra");
				
	if ($dbr(ra=>rows) > 0 ) {
		xlog ("L_INFO", "time_condition[$dbr(ra=>[0,1])] active at $dbr(ra=>[0,0]): $rU -> $dbr(ra=>[0,4])");
		$rU = $dbr(ra=>[0,4]);
	}


	sql_result_free ("ra");

	return;
}

# Check a PIN, and if validated, consume it
route[43] {
	xlog ("L_INFO", "Checking PIN code");

	$var(code) = $(ru{s.substr,4,$var(NumPinDigits)});
	sql_query ( "sqlconn", "select * from accountcodes where 
		accountid = '$var(code)' 
		and enabled=true", "ra");
	if ($dbr(ra=>rows) <  1 ) {
		xlog ("L_INFO", "Invalid PIN: $var(code)");
		sl_send_reply("403", "Invalid PIN code");
		exit;
	}
	$var(a) = $var(NumPinDigits) + 5;
	$ru = "sip:" + $(ru{s.substr,$var(a),0});

	return;
}

#----------------------------------------------------------
# Route 50-59 - Utility functions
#----------------------------------------------------------
# Send back a Method not allowed message
route[50] {
	sl_send_reply ("405", "Method not Allowed");
}


# www Authorization Check (e.g. Register, Subscribe)
route[55] {
	if (!www_authorize("", "subscriber")) {
		# xlog ("L_INFO", "Not Authorized -  doing Auth Challenge first");
		www_challenge("", "0");
       	        exit;
	}

	return;
}

# proxy Authorization Check (e.g. Invite offnet)
route[56] {
	if (!proxy_authorize("", "subscriber")) {
		# xlog ("L_INFO", "Not Authorized -  doing Proxy challenge first");
		proxy_challenge("", "0");
       	        exit;
	} else {
		consume_credentials();
	}

	return;
}

#----------------------------------------------------------
# Route 60-79 - Site Local Routes
#----------------------------------------------------------


