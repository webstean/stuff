route[SANITY] {
    
    if (is_method("INVITE|REGISTER")) {
        ##### scanner - IP address in UA
        if($sel(contact.uri.host) =~ "^(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})$") {
            route(BLOCKIP);
			xlog("L_INFO","$si is using IP addressess instead of DNS - ignoring");
			exit;
        }
        
		##### SQL Injection
        if($au =~ "(\=)|(\-\-)|(')|(\#)|(\%27)|(\%24)" and $au != $null) {
            xlog("L_ERROR","$si:$sp is trying to do a sql injection attack with $au - ignoring");
			route(BLOCKIP);
		    exit;
        }
        ##### Spoofing Attack
        ##if($(hdr(Record-Route)[0]{nameaddr.uri}) != $si and $(hdr(Record-Route)[0]{nameaddr.uri}) != $null) {
        ##    xlog("L_INFO","Spoofing attack detected from $si with $ru - ignoring");
		##    route(BLOCKIP);
		##    exit;
        ##}
    }
	##### check if known SIP scanner
	if($ua =~ "(Cisco-SIPGateway|Intraswitch|friendly-scanner|sipvicious|sipcli|sip-scan|sipsak|sundayddr|iWar|CSipSimple|SIVuS|Gulp|sipv|smap|friendly-request|VaxIPUserAgent|siparmyknife|Test Agent)") {
		# xlog("L_INFO","Known SIP Scanner [$ua] trying to call $rU - ignoring");
		xlog("L_WARN", "$ci|end|dropping message with user-agent $ua");
		route(BLOCKIP);
		# optional send Ok - can make the scammers stop sooner
		sl_send_reply("200", "OK");
        exit;
    }
    
	#### check if known User Agent - ignore otherwise but allow null
	if !($ua =~ "(3CX|baresip|Linphone|Bria iOS|Microsoft.PSTNHub|Z)" || $ua==$null) {
### #!ifdef DEBUG
        xlog("L_ERROR","Unknown User Agent [$ua] trying to call $rU - ignoring\n");
### #!endif
		# optional send Ok - can make the scammers stop sooner
		sl_send_reply("200", "OK");
        exit;
    }
    
	#### too many hops
	if(!mf_process_maxfwd_header("10")) {
		xlog("L_ERROR","Too many hops from $si:$sp - sending error\n");
		sl_send_reply("483","Too Many Hops");
		exit;
	}

	#### SIP message too big
	if(msg:len>2048) {
    	xlog("L_ERROR","SIP Message too big from $si:$sp - sending error\n");
	    sl_send_reply("413", "Message too large");
        exit;
    };

	#### Phone number too long
	if($(rU{s.len}) > 15 ) {
		# xlog("L_ERROR", "Phone number is too long from $si:$sp with $rU - sending error");
		sl_send_reply("413","Not Accepted");
		exit;
	}
	
	#### malformed SIP messages
	if(!sanity_check("1511", "7")) {
		xlog("L_ERROR","Malformed SIP message from $si:$sp - ignoring\n");
		# quietly ignore
		drop;
	}
	return;
}

route[INFO] {
#!ifdef WITH_GEOIP
    if(geoip2_match("$si", "src")) {
 		##xlog("L_INFO","Packet recieved from IP $si");
		##xlog("L_INFO","Country is: $gip2(src=>cc)\n");
		##xlog("L_INFO","City is: $gip2(src=>city)");
		##xlog("L_INFO","ZIP is: $gip2(src=>zip)");
		##xlog("L_INFO","Regc is: $gip2(src=>regc)");
		##xlog("L_INFO","Regn is: $gip2(src=>regn)");
		##xlog("L_INFO","Metro Code is: $gip2(src=>metro)");
        if($gip2(src=>cc)=="") {
            xlog("L_INFO","Cannot determine geoip ip for [$si] - ignoring");
            exit;
        }
        ## Microsoft sip[1|2].pstnhub.microsoft.com are located in
        ## Singapore (SG), USA (US) and Netherlands (NL)
	    if($gip2(src=>cc)=~"AU|US|NL|SG"){
            ## Pretty format
            ## xlog("L_INFO","processing: $gip2(src=>cc):$pr:$si:$sp[$rm]($fu) [$ua]\n");
			## xlog("L_INFO","Request: $rm '$ru' ($cs $rm) from '$fu' ($proto:$si:$sp) [$ci] [$ua]\n");
#!ifdef WITH_DEBUG
			xlog("L_INFO","=FILTERED=>: $rm ($fu ($si:$sp) to $tu, $ci)\n");
#!else
			;
#!endif
			## xnotice("[$dlg_var(cidhash)] Request: $rm '$ru' ($cs $rm) from '$fu' ($proto:$si:$sp) [$ci]\n");
        } else {
            xlog("L_INFO","Traffic [$si] is not from AU/US/NL/SG, its from $gip2(src=>cc) so - ignoring");
            exit;
        }
    }
#!endif
	return;
}

# Per SIP request initial checks
route[REQINIT] {
	# no connect for sending replies
	set_reply_no_connect();
	# enforce symmetric signaling
	# - send back replies to the source address of request
	force_rport();

#!ifdef WITH_ANTIFLOODING
#!ifdef WITH_APIBAN
	# flood detection from same IP and traffic ban for a while
	# be sure you exclude checking trusted peers, such as pstn gateways
	# - local host excluded (e.g., loop to self)
	if(src_ip!=myself) {
		if($sht(ipban=>$si)!=$null) {
			# ip is already blocked
			xdbg("request from apiban.org blocked IP - $rm from $fu (IP:$si:$sp)\n");
			exit;
		}
		if (!pike_check_req()) {
			xlog("L_ALERT","ALERT: pike blocking $rm from $fu (IP:$si:$sp)\n");
			$sht(ipban=>$si) = 1;
			exit;
		}
	}
#!endif
#!endif
	return;
}

route[APIBAN] {
#!ifdef WITH_APIBAN
	// check if we already have an APIBAN id... if so, get the updates and
	// if not, get the full list of banned ips.

	// replace MYAPIKEY with your apiban.org API key.
	$var(apikey) = "APIBANKEY";

	if($sht(apibanctl=>ID) == 0) {
		$var(apiget) = "https://apiban.org/api/" + $var(apikey) + "/banned";
	} else {
		$var(apiget) = "https://apiban.org/api/" + $var(apikey) + "/banned/" + $sht(apibanctl=>ID);
	}

	xlog("L_INFO","APIBAN: Sending API request to $var(apiget)\n");
	http_client_query("$var(apiget)", "$var(banned)");

	// if we dont get a 200 OK from the webserver we will log and exit
	if($rc!=200) {
		xlog("L_INFO","APIBAN: No 200 Received. $var(banned)\n");
		exit;
	}

	// lets loop through the ipaddresses we received from our API request
	$var(count) = 0;
	jansson_array_size("ipaddress", $var(banned), "$var(size)");
	while($var(count) < $var(size)) {
		jansson_get("ipaddress[$var(count)]", $var(banned), "$var(blockaddr)");
		// add the blocked ipaddress to the apiban htable and log
		$sht(apiban=>$var(blockaddr)) = 1;
		xlog("L_INFO","API: ipaddress[$var(count)] == $var(blockaddr)\n");

		$var(count) = $var(count) + 1;
	}

	// lets get our control ID and use it for incremental downloads
	jansson_get("ID", $var(banned), "$var(apiid)");
	xlog("L_INFO","ID: $var(apiid)\n");
	$sht(apibanctl=>ID) = $var(apiid);
#!endif
	return ;
}

#!ifdef WITH_APIBAN
event_route[htable:mod-init] {
	# pre load apiban
	route(APIBAN);
}
#!endif
